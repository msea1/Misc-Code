[meta]
title = "System Adjustable Parameters (SAPs) Specification"
doc_type = "sap"
config = "block2-5"
version = 15
format = "TOML. see: https://github.com/toml-lang/toml"

# ###################################################################################################################### #
# SAPs are ingested on the spacecraft by the sap-service
# The required fields in this toml are:
#       sap_key -- must be present and unique
#       data_type -- must be present but can be blank ("") (sap-service will do no type checks in that case)
#       valid_range -- must be present but can be blank ("") (sap-service will do no validity checks in that case)
#       desc -- a few words describing what the SAP is for. This is not ingested by FSW, but we require this here
#
# All other fields in the toml are informational and not used by FSW:
#       units -- units of the value stored, if units make sense for it. Units for a boolean don't make sense for example.
#       active -- indicates whether FSW is using the SAP for anything. See: http://jira.spaceflightindustries.com/browse/FSW-2017
#       sap_family -- used to group related saps.
#       readonly   -- Denotes satellite specific calibration parameters which are determined
#                     pre-launch and should never need adjustment on-orbit.
#
# In addition to this toml, there are config files for *each* spacecraft ID housing the default value for *each* SAP.
# Each config file must have a value for each SAP!
# That value can be blank ("").
# ###################################################################################################################### #

[[saps]]
sap_key = "TestSap"
desc = "This SAP is not connected to anything and is intended for use with automated testing."
data_type = "string"
active = false
units = ""
valid_range = ""

[[saps]]
sap_key = "SfxDelayForCmdResp"
desc = """ If command responses are routed through x-band and a downlink_image or fault (ie Alarm, Panic, Reboot) command is received,
           delay this amount of seconds to issue the command response in SFT mode before switching the PIC to SFX mode."""
data_type = "float"
active = true
units = "seconds"
valid_range = "[0, 10]"

[[saps]]
sap_key = "UHFDownlinkWarmupMicrosec"
desc = "Controls how long the UHF radio should transmit a stream of idle bits when moving from receive to transmit."
data_type = "uint64"
active = true
units = "microsec"
valid_range = "[0, 10000000]"  # 10 seconds max

[[saps]]
sap_key = "UHFDownlinkCooldownMicrosec"
desc = "Controls how long the UHF radio should transmit a stream of idle bits when done transmitting a message."
data_type = "uint64"
active = true
units = "microsec"
valid_range = "[0, 5000000]"  # 5 seconds max

[[saps]]
sap_key = "UdpSessionTimeoutSeconds"
desc = """ This timeout value will be the maximum amount of time that the flight computer will allow a UDP Send or Receive session.
           After expiration of the timeout value it will close the UDP session."""
data_type = "uint32"
active = true
units = "seconds"
valid_range = "[1, 900]"

[[saps]]
sap_key = "ACGCycleSeconds"
desc = "Seconds between ACG checks for a Comms tracking target."
data_type = "uint8"
active = true
units = "seconds"
valid_range = "[1, 60]"

[[saps]]
sap_key = "GroundStationListForACG"
desc = """  A list of ground stations used by ACG.

            Entries in the list must be separated by a newline character (\n), and fields must be separated by a
            semicolon (;). The fields are of the following format:

            ID;USE;ECEF_X;ECEF_Y;ECEF_Z;LAT;LONG;ALT;EL_ANG

            * ID = Up to 15 character string. Ground station ID. Printed in system logs.
            * USE = Integer. 0 to ignore this ground station or non-zero value to use it during ACG.
            * ECEF_X = Double. Ground station ECEF Position X (m).
            * ECEF_Y = Double. Ground station ECEF Position Y (m).
            * ECEF_Z = Double. Ground station ECEF Position Z (m).
            * LAT = Double. Ground station latitude (deg).
            * LONG = Double. Ground station longitude (deg).
            * ALT = Double. Ground station altitude (m).
            * EL_ANG = Double. Elevation angle limit (deg).

            Entries which do not conform to this format will be silently ignored."""
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "AutoSatelliteResetHours"
desc = "After this threshold time passes without a ground command or any reset, C&DH will reset the satellite."
data_type = "float"
active = true
units = "hours"
valid_range = "[1, 72]"

[[saps]]
sap_key = "AutoSatelliteResetHoursEnabled"
desc = "Defines whether the behavior defined for AutoSatelliteResetHours is enabled or disabled."
data_type = "boolean"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "TotalHealthLogFileSize"
desc = "This SAP specifies the total file size allowed for health logs."
data_type = "uint32"
active = true
units = "bytes"
valid_range = "[1, 100000000]"

[[saps]]
sap_key = "CheckoutModeTimeoutMinutes"
desc = "This SAP specifies the time that C&DH can keep the satellite in Checkout mode before it automatically transfers to Safe mode."
data_type = "float"
active = true
units = "minutes"
valid_range = "[0.1, 120]"

[[saps]]
sap_key = "FaultLatchTimeoutMinutes"
# LeoStella Reference: https://confluence.leostella.com/display/BLK2/Block+2+FSW+Arch%3A+9.+Service+Fault+Management
desc = """  Specifies the time that health service waits after it boots before allowing any action from an Alarm or Panic.
            In other words, until this time has passed after a boot the FSW will not respond to any Alarm or Panic.

            This timeout begins at each new boot, which occurs only after separation, FCPU reboots, and Panics.
            Restarts do not reset this timeout.
            This timeout is immediately expired if the spacecraft is commanded out of SAFE Mode.

            If an Alarm or Panic is reported while health service is in this hold-off state, then health service latches that condition.
            If a Panic Condition is reported after an Alarm Condition, health service will latch the Panic. The reverse is not true.

            Once the hold-off state is over, a latched Alarm or Panic is executed immediately.

            For more info, see: https://confluence.spaceflightindustries.com/display/SPP/Block+2+FSW+Arch%3A+9.+Service+Fault+Management
"""
data_type = "float"
active = true
units = "minutes"
valid_range = "[0.1, 60]"

[[saps]]
sap_key = "RestartFaultLatchTimeoutMinutes"
# LeoStella Reference: https://confluence.leostella.com/display/BLK2/Block+2+FSW+Arch%3A+9.+Service+Fault+Management
desc = """ Specifies the time health service waits after it restarts (different from boots) before invoking action from an Alarm or Panic.
           In other words, until this time has passed after health service restarts, the FSW will not respond to any Alarm or Panic.

           This timeout begins at each health service restart, which occurs only after an Alarm or internal crash.
           Reboots mean FSW falls back to using FaultLatchTimeoutMinutes.
           This timeout is immediately expired if the spacecraft is commanded out of SAFE Mode.

           As with FaultLatchTimeoutMinutes, Alarm/Panic reported during hold-off state are latched and executed once the timeout expires.
           More info at https://confluence.spaceflightindustries.com/display/SPP/Block+2+FSW+Arch%3A+9.+Service+Fault+Management

           Note that the larger this value is set, the longer the S/C will take to recover from a fault condition
           that may only be recovered via a Panic action (i.e. a full power cycle via the PCU)"""
data_type = "float"
active = true
units = "minutes"
valid_range = "[0.1, 10]"

[[saps]]
sap_key = "MaxAlarmCount"
desc = "This SAP specifies the number of Alarms that can occur without clearing SAFE Mode before health service escalates to a Panic"
data_type = "unsigned integer"
active = true
valid_range = "[1, 10]"

[[saps]]
sap_key = "CommandTimeoutSeconds"
desc = "Seconds that the spacecraft will let a command run before killing it."
data_type = "float"
active = true
units = "seconds"
valid_range = "[1, 30]"  # min of 1 so that timeout can't be less time than it takes to safely change SAPs

[[saps]]
sap_key = "BeaconIntervalSeconds"
desc = """  This SAP specifies the seconds between subsequent beacon transmissions, with data as specified in the SCOUT Block 2
             Telemetry and Logs IDD. The inverse of this value represents the beacon frequency.
             This value is not used if EnableBeaconSyncOnSeconds is activated. """
data_type = "uint32"
active = true
units = "seconds"
valid_range = "[10, 600]"

[[saps]]
sap_key = "SafeModeBeaconBlackoutSeconds"
desc = "This SAP specifies the seconds to prevent the beacon from operating after separation from launch vehicle."
data_type = "uint32"
active = true
units = "seconds"
valid_range = "[0, 14400]"

[[saps]]
sap_key = "EnableBeaconOnHardRestart"
desc = """ Defines whether the beacon is enabled or disabled in case of hard restart.
           A hard restart is when cmdseq-service restarts and the spacecraft mode is SAFE and the alarm counter is 0."""
data_type = "boolean"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "EnableBeaconOnSoftRestart"
desc = """ Defines whether the beacon is enabled or disabled in case of soft restart.
           A soft restart is when cmdseq-service restarts and the spacecraft mode is SAFE and the alarm counter is not 0."""
data_type = "boolean"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "EnableBeaconSyncOnSeconds"
desc = """  If set to true, the beacon emission is synchronized on the seconds past the minute as specified by the SAP SyncBeaconModeSeconds.
            Else the beacon is free running, with an emission period defined by the BeaconIntervalSeconds SAP."""
data_type = "boolean"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "SyncBeaconModeSeconds"
desc = """  Defines the seconds past the minute on which the beacon emission is synchronized if EnableBeaconSyncOnSeconds is actived."""
data_type = "uint8"
active = true
units = "seconds"
valid_range = "[0, 59]"

[[saps]]
sap_key = "EnableScriptDeferredValidation"
desc = """ Enable cmdseq to defer script validation until command execution. """
data_type = "boolean"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "FastTelemetryDetumbleDurationMinutes"
desc = """ This SAP specifies that duration during which select telemetry in the Telemetry and Logs IDD will be output at an
           accelerated rate of 20 Hz on the initial boot up. Once this interval has elapsed, telemetry will be output at the
           nominal rate. This timeout does not affect ground commands to create 20hz logs."""
data_type = "float"
active = true
units = "minutes"
valid_range = "[1, 60]"

[[saps]]
sap_key = "FlightDiskUsageCleanupIntervalSeconds"
desc = """ Defines the how often (every N seconds) disk monitoring will occur on flight computer.
           It would be smart to not let this period exceed the value in FaultLatchTimeoutMinutes.
           Or we run the (very small) risk of getting into a reset cycle w/o ever clearing log space."""
data_type = "float"
active = true
units = "seconds"
valid_range = "[60, 600]"

[[saps]]
sap_key = "FlightDiskUsageCleanupThresholdPercent"
desc =  """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable amount
           of usage of the flight disk. A usage rate more than this value begins pruning until usage is below threshold."""
data_type = "float"
active = true
valid_range = "[0.50, 0.95]"
units = "percentage"

[[saps]]
sap_key = "DownlinkChannelFileUplinkReplyDefault"
desc = "Downlink route set by ACG mode for uplink data acknowledgment SFT packets."
data_type = "string"
active = true
units = ""
valid_range = "UHF, X_BAND, GSE"

[[saps]]
sap_key = "DownlinkChannelFileDownlinkDataDefault"
desc = "Downlink route set by ACG mode for file downlink chunk SFT packets."
data_type = "string"
active = true
units = ""
valid_range = "UHF, X_BAND, GSE"

[[saps]]
sap_key = "DownlinkChannelFileAsSftDownlinkDataDefault"
desc = "Downlink route set by ACG mode for file as SFT downlink data SFT packets."
data_type = "string"
active = true
units = ""
valid_range = "UHF, X_BAND, GSE"

[[saps]]
sap_key = "DownlinkChannelCommandResponseDefault"
desc = "Downlink route set by ACG mode for response to single Mission Command SFT packets."
data_type = "string"
active = true
units = ""
valid_range = "UHF, X_BAND, GSE"

[[saps]]
sap_key = "DownlinkChannelRealtimeHealthDefault"
desc = "Downlink route set by ACG mode for realtime health telemetry SFT packets."
data_type = "string"
active = true
units = ""
valid_range = "UHF, X_BAND, GSE"

[[saps]]
sap_key = "DownlinkChannelRealtimeSystemDefault"
desc = "Downlink route set by ACG mode for realtime system telemetry SFT packets."
data_type = "string"
active = true
units = ""
valid_range = "UHF, X_BAND, GSE"

[[saps]]
sap_key = "SapCommitTimeoutMinutes"
desc = """ Duration allowed for SAPs to be committed but not saved.

           If a new SAP is committed via the commit_sap_updates command, a
           timer is started. Calling the save_sap_updates mission command will
           cancel the timer. If the timer expires, sap-service will cause the
           system to alarm.
           """
data_type = "float"
active = true
units = "minutes"
valid_range = "[0.25, 2880.0]"


#
# ADCS SAPs
#

[[saps]]
sap_key = "adcs.vehicle.mass"
desc = """  Spacecraft mass.

            Estimated mass of the spacecraft.

            Note this may change over time due to fuel usage (propulsion maneuvers)."""
data_type = "float"
readonly = true
active = true
units = "kg"
valid_range = "[0, 1e+6]"

[[saps]]
sap_key = "adcs.vehicle.cm"
desc = """  Spacecraft center of mass.

            Estimated center of mass location relative to spacecraft body origin.

            Note this may change over time due to fuel usage (propulsion maneuvers)."""
data_type = "string"
readonly = true
active = true
units = "m"
valid_range = ""

[[saps]]
sap_key = "adcs.vehicle.inertia"
desc = """  Spacecraft inertia.

            Estimated inertia (3x3 matrix) relative to spacecraft center of mass.

            Note this may change over time due to fuel usage (propulsion maneuvers)."""
data_type = "string"
readonly = true
active = true
units = "kg*m^2"
valid_range = ""

[[saps]]
sap_key = "adcs.attctl.loop.gain"
desc = """  ADCS attitude controller loop gains.

            Attitude controller [X Y Z] loop gains for both reaction wheel and torque rod based attitude control.

            The loop gains are usually set as the diagonal entries of adcs.vehicle.inertia."""
data_type = "string"
readonly = true
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.str1.q_bdy2str"
desc = """  Body to Star Tracker 1 quaternion transformation.

            Quaternion representing the transformation between the nominal body frame to the nominal Star Tracker 1
            frame.

            Star Tracker 1 misalignment is handled by adcs.saps.sensCorrSAPs.qStr1Align."""
data_type = "string"
readonly = true
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.str2.q_bdy2str"
desc = """  Body to Star Tracker 2 quaternion transformation.

            Quaternion representing the transformation between the nominal body frame to the nominal Star Tracker 2
            frame.

            Star Tracker 2 misalignment is handled by adcs.saps.sensCorrSAPs.qStr2Align."""
data_type = "string"
readonly = true
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.rw.q_bdy2rwl.xy"
desc = """  Body to Reaction Wheel quaternion transformation, common XY components.

            XY components of a scalar-last quaternion representing the common absolute value of Body to RW orientation
            for a symmetric pyramidal 4-RW configuration.

            * Body-to-RW1 = [ -XY   XY  0.0  Z ]
            * Body-to-RW2 = [ -XY  -XY  0.0  Z ]
            * Body-to-RW3 = [  XY  -XY  0.0  Z ]
            * Body-to-RW4 = [  XY   XY  0.0  Z ]

            The software handles +/- signs that define the unique orientation for each RW."""
data_type = "double"
readonly = true
active = true
units = ""
valid_range = "[0.0, 1.0]"

[[saps]]
sap_key = "adcs.rw.q_bdy2rwl.z"
desc = """  Body to Reaction Wheel quaternion transformation, common scalar component.

            Scalar component of a scalar-last quaternion representing the common value of Body ro RW orientation for a
            symmetric pyramidal 4-RW configuration.

            * Body-to-RW1 = [ -XY   XY  0.0  Z ]
            * Body-to-RW2 = [ -XY  -XY  0.0  Z ]
            * Body-to-RW3 = [  XY  -XY  0.0  Z ]
            * Body-to-RW4 = [  XY   XY  0.0  Z ]

            Unlike XY, there are no +/- signs added to the scalar component by FSW."""
data_type = "double"
readonly = true
active = true
units = ""
valid_range = "[-1.0, 1.0]"

[[saps]]
sap_key = "adcs.rw.torq.xy"
desc = """  Reaction Wheel max slew torque vector, common Body XY components.

            Body XY components of a vector representing the common absolute value of RW max allowable slew torque for a
            symmetric pyramidal RW configuration (pyramid pointing in -Z direction).

            * RW1 Torque = [  XY   XY  Z ]
            * RW2 Torque = [ -XY   XY  Z ]
            * RW3 Torque = [ -XY  -XY  Z ]
            * RW4 Torque = [  XY  -XY  Z ]

            The software handles +/- signs that define the unique XY direction for each RW."""
data_type = "double"
readonly = true
active = true
units = "Nm"
valid_range = "[-1.0, 1.0]"

[[saps]]
sap_key = "adcs.rw.torq.z"
desc = """  Reaction Wheel max slew torque vector, common Body Z component.

            Body Z component of a vector representing the common value of RW max allowable slew torque for a symmetric
            pyramidal RW configuration (pyramid pointing in -Z direction).

            * RW1 Torque = [  XY   XY  Z ]
            * RW2 Torque = [ -XY   XY  Z ]
            * RW3 Torque = [ -XY  -XY  Z ]
            * RW4 Torque = [  XY  -XY  Z ]

            Unlike XY, there are no +/- signs added to the Z component by FSW."""
data_type = "double"
readonly = true
active = true
units = "Nm"
valid_range = "[-1.0, 1.0]"

[[saps]]
sap_key = "adcs.rw.momt.xy"
desc = """  Reaction Wheel max slew momentum vector, common Body XY components.

            Body XYs components of a vector representing the common value of RW max allowable slew momentum for a
            symmetric pyramidal RW configuration (pyramid pointing in -Z direction).

            * RW1 Momentum = [  XY   XY  Z ]
            * RW2 Momentum = [ -XY   XY  Z ]
            * RW3 Momentum = [ -XY  -XY  Z ]
            * RW4 Momentum = [  XY  -XY  Z ]

            The software handles +/- signs that define the unique XY direction for each RW.

            Note that the slew momentum does not indicate the total available RW capacity for detumble / rate damp,
            which is defined by adcs.saps.rwX.speedLimit1 for each RW."""
data_type = "double"
readonly = true
active = true
units = "Nms"
valid_range = "[-1.0, 1.0]"

[[saps]]
sap_key = "adcs.rw.momt.z"
desc = """  Reaction Wheel max slew momentum vector, common Body Z component.

            Body Z component of a vector representing the common value of RW max allowable slew momentum for a
            symmetric pyramidal RW configuration (pyramid pointing in -Z direction).

            * RW1 Momentum = [  XY   XY  Z ]
            * RW2 Momentum = [ -XY   XY  Z ]
            * RW3 Momentum = [ -XY  -XY  Z ]
            * RW4 Momentum = [  XY  -XY  Z ]

            Unlike XY, there are no +/- signs added to the Z component by FSW.

            Note that the slew momentum does not indicate the total available RW capacity for detumble / rate damp,
            which is defined by adcs.saps.rwX.speedLimit1 for each RW."""
data_type = "double"
readonly = true
active = true
units = "Nms"
valid_range = "[-1.0, 1.0]"

[[saps]]
sap_key = "adcs.track.align.comm"
desc = """  CommTrack Body alignment vector.

            Indicates the body unit vector to align to the CommTarget during CommTrack."""
data_type = "string"
readonly = true
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.track.align.image"
desc = """  ImageTrack Body alignment vector.

            Indicates the body unit vector to align to the ImageTarget during ImageTrack."""
data_type = "string"
readonly = true
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.track.align.nadir"
desc = """  NadirTrack Body alignment vector.

            Indicates the body unit vector to align to NadirDetic during NadirTrack."""
data_type = "string"
readonly = true
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.track.align.rso"
desc = """  RSOTrack Body alignment vector.

            Indicates the body unit vector to align to the RSOTarget during RSOTrack."""
data_type = "string"
readonly = true
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.track.align.inertial"
desc = """  InertialPoint Body alignment vector.

            Note that because InertialPoint is defined by a Body to CBI quaternion and not align/clock, this SAP is not
            expected to have any effect, but is included for consistency."""
data_type = "string"
readonly = true
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.startup.delay"
desc = """  ADCS startup delay duration.

            ADCS sensor processing begins this long after FSW service startup.

            Used to ensure the ADCS sensors have initialized and completed any necessary
            warmup period (IMU requires 30 seconds).

            Since Bdot Desaturate Mode does not use the IMU this SAP is ignored in Bdot,
            and the minimum ADCS delay (10 seconds) is used instead."""
data_type = "uint16"
active = true
units = "seconds"
valid_range = "[10, 60]"

[[saps]]
sap_key = "adcs.desaturate.mode"
desc = """  Desaturation mode configuring ADCS detumble behavior.

           * Norm: Nominal detumble to SunTrack behavior with nominal momentum controller.
           * Safe: Emergency mode using min set of sensors/actuators (CSS+FSS+Mag+TRod), ASI/c++ algorithm for
                   detumble and RW-less Sun pointing
           * Bdot: No-IMU mode using B-dot momentum control for detumble, Sun pointing uses RW's when rates can be
                   estimated, incapable of high-rate tracking
           * Trod: No-RW mode using torque rods for both detumble and Sun pointing. Requires a nominally-functioning IMU.
                   All available sensor measurements (ST, FSS, CSS, GPS, MRM, IMU) are employed.
           * Vimu: No-IMU mode using B-dot momentum control for detumble, virtual IMU of sensors, capable of all
                   slewing/tracking modes"""
data_type = "string"
active = true
units = ""
valid_range = "Norm, Safe, Bdot, Trod, Vimu"

[[saps]]
sap_key = "adcs.fail.autobdot.maxcnt"
desc = """  The number of times ADCS is allowed to restart on IMU failures
            such as IMU missing or Excessive Noise before autonomously
            switching to Bdot Desaturate Mode.

            A zero value zero disables autonomous Bdot on IMU failures.

            Note:
              The ADCS IMU failure restart counter is stored in a volatile
              persistence file and is cleared upon reboot."""
data_type = "uint8"
active = true
units = "N/A"
valid_range = "[0, 100]"

[[saps]]
sap_key = "adcs.fail.autobdot.clrcnt"
desc = """  The number of minutes of successful ADCS operation before the
            ADCS IMU fail count (used to compare with `adcs.fail.autobdot.cnt`)
            is cleared"""
data_type = "uint8"
active = true
units = "minutes"
valid_range = "[1, 100]"

[[saps]]
sap_key = "adcs.gps.PosErrGain"
desc = """  Orbit Propagation Filter GPS Position Error Gain.
            Determines the contribution of GPS position measurements to ADCS orbit propagation each cycle."""
data_type = "float"
readonly = true
active = true
units = "N/A"
valid_range = "[0, 1]"

[[saps]]
sap_key = "adcs.gps.VelErrGain"
desc = """  Orbit Propagation Filter GPS Velocity Error Gain.
            Determines the contribution of GPS velocity measurements to ADCS orbit propagation each cycle."""
data_type = "float"
readonly = true
active = true
units = "N/A"
valid_range = "[0, 1]"

[[saps]]
sap_key = "adcs.gps.NumMeasToConverge"
desc = """  Number of Accepted GPS Measurements for Orbit Propagation Filter Convergence.
            Need at least this number of accepted GPS measurements within the convergence window (currently 
            set to 6000 s) for the orbit propagation filter to be considered converged.
            Otherwise, the filter and the convergence window will reset."""
data_type = "uint32"
readonly = true
active = true
units = "N/A"
valid_range = "[0, 100000]"

[[saps]]
sap_key = "adcs.momentum.ratedamp.limit"
desc = """  Total momentum magnitude RateDamp limit.

            Below this limit, the ADCS detumble sequence exits Idle AC mode and enters RateDamp AC mode.

            This limit should correspond to the maximum capacity of the reaction wheels."""
data_type = "float"
active = true
units = "Nms"
valid_range = ""

[[saps]]
sap_key = "adcs.momentum.limit.hi"
desc = """  High total momentum magnitude limit.

            If total momentum magnitude crosses above this limit, the ADCS detumble sequence is triggered. The trigger
            is not set/reset until the spacecraft has reduced momentum to below 10 mNms and entered Nominal
            Operations."""
data_type = "float"
active = true
units = "Nms"
valid_range = ""

[[saps]]
sap_key = "adcs.suntrack.clocking"
desc = """  SunTrack clocking option for detumble.

            Detumble/desaturation sequence completes in SunTrack; this specifies the clocking ephemeris reference 
            option that the default clocking body axis will clock toward. Used with adcs.suntrack.desat.clock.axis to 
            fully define the clocking."""
data_type = "string"
active = true
units = ""
valid_range = "IntertialFixd, SC2Sun, SC2NadirDetic, SC2NadirCentric, SCVelocity, SCMagField, SC2Tgt, TgtNormal, TrueNorth, TrueNorthAtTgt"

[[saps]]
sap_key = "adcs.trdb.enable"
desc = """  Enable Torque Rod Deadband.

            Enables Torque Rod Deadband momentum control logic. Momentum control OFF when estimated momentum and
            magnetic field vectors are >40 deg apart, and momentum control ON when estimated momentum and magnetic
            field vectors are <15 deg apart.

            Exceptions to momentum control ON: ImageTrack, InertialPoint, RSOTrack, EigenSlew, RendezSlew.

            Generally more efficient/effective than regular momentum control, especially at low altitudes."""
data_type = "boolean"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.sunacq.search.rate"
desc = """  SunSearch rotation rate in SunAcq.

            Spacecraft rotation rate about a pre-defined axis in the SunSearch submode of the SunAcq AC mode."""
data_type = "double"
active = true
units = "radians / second"
valid_range = "[0.0, 0.0872664625997165]"

[[saps]]
sap_key = "adcs.koz.payload.halfang"
desc = """  Sun-Payload Keep Out Zone half angle.

            Half angle defining a Sun Keep Out Zone (KOZ) cone centered around the payload boresight.

            Violations trigger the Payload_KOZ_Response FJ script.

            The KOZ is deactivated during all/part of eclipse as per adcs.koz.limb.

            KOZ violation determination is based on Sun vector measurements (from Sun sensors) rather than
            derived from ephemeris/attitude knowledge. This avoids false positive and false negative KOZ due to
            attitude inaccuracies, but is susceptible to sensor inaccuracies (e.g. CSS bias due to albedo). 
            
            Note the KOZ can be triggered/inhibited falsely in areas of the KOZ when there is only one CSS valid, 
            because the Sun vector estimate equals the direction of the CSS boresight.
            
            Setting this SAP to 0.0 effectively disables the KOZ."""
data_type = "double"
active = true
units = "radians"
valid_range = "[0.0, 1.5707963267949]"

[[saps]]
sap_key = "adcs.koz.payload.axis"
desc = """  Payload Keep Out Zone axis unit vector.
            
            Defines the direction of a conical payload keep-out zone, typically aligned with the payload boresight.
            
            To deactivate this KOZ, make this SAP an aritrary unit vector and set adcs.koz.payload.halfang to 0.0."""
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.koz.payload2.halfang"
desc = """  Sun-Payload2 Keep Out Zone half angle.

            Half angle defining a Sun Keep Out Zone (KOZ) cone centered around the secondary payload boresight.

            Violations trigger the Payload_KOZ_Response FJ script.

            The KOZ is deactivated during all/part of eclipse as per adcs.koz.limb.

            KOZ violation determination is based on Sun vector measurements (from Sun sensors) rather than
            derived from ephemeris/attitude knowledge. This avoids false positive and false negative KOZ due to
            attitude inaccuracies, but is susceptible to sensor inaccuracies (e.g. CSS bias due to albedo). 
            
            Note the KOZ can be triggered/inhibited falsely in areas of the KOZ when there is only one CSS valid, 
            because the Sun vector estimate equals the direction of the CSS boresight.
            
            Setting this SAP to 0.0 effectively disables the KOZ."""
data_type = "double"
active = true
units = "radians"
valid_range = "[0.0, 1.5707963267949]"

[[saps]]
sap_key = "adcs.koz.payload2.axis"
desc = """  Payload2 Keep Out Zone axis unit vector.
            
            Defines the direction of a conical Payload2 keep-out zone, typically aligned with the Payload2 boresight.
            
            To deactivate this KOZ, make this SAP an aritrary unit vector and set adcs.koz.payload2.halfang to 0.0."""
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.suntrack.desat.clock.axis"
desc = """  Desaturation sequence SunTrack clocking unit vector.

            Body unit vector defined as the clocking axis when the detumble/desaturation sequence completes by 
            transitioning to SunTrack. Used with adcs.suntrack.clocking to fully define the clocking.
            
            Note that the desaturation sequence is initialized upon ADCS restart and in response to certain telemetry
            monitors."""
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.koz.limb"
desc = """  Sun-Payload Keep Out Zone Eclipse offset angle.

            Angle between Sun and Earth limb at which the KOZ becomes active in eclipse. The Sun-Payload Keep Out Zone
            (KOZ) is inactive during the full eclipse if this angle is zero.

            For positive angles, the KOZ will be active prior to eclipse exit. This is recommended as it helps avoid
            instantaneous payload exposure/damage upon eclipse exit."""
data_type = "double"
active = true
units = "radians"
valid_range = "[0.0, 1.5707963267949]"

[[saps]]
sap_key = "adcs.rw.nulspc.mom.bias"
desc = """  Reaction wheel null space controller momentum bias.

            This parameter defines the reaction wheel momentum bias--and hence the nominal RW speed offset--applied by
            the RW null space controller.

            The purpose of the RW null space controller is to avoid unnecessary RW zero-speed crossings while
            generating net zero torque.

            Note that this does not preclude zero-speed crossings during slewing/tracking. Furthermore, accumulated
            momentum due to external disturbances (e.g. aerodynamic drag, gravity gradient) may shift two of the RWs to
            near-zero speeds."""
data_type = "float"
active = true
units = "Nms"
valid_range = "[0.0, 100.0]"

[[saps]]
sap_key = "adcs.rw.nulspc.ctl.gain"
desc = """  Reaction wheel null space controller gain.

            This parameter defines the gain (and hence, rate of convergence to desired setpoint) RW null space
            controller."""
data_type = "float"
active = true
units = ""
valid_range = "[0.0, 10.0]"

[[saps]]
sap_key = "adcs.slew.accel.scale"
desc = """  Slew accleration scale factor.

            Scales the acceleration of all slews as a proportion of the maximum acceleration.

            Note that the maximum acceleration envelope is based on the RW max torque and the spacecraft inertia."""
data_type = "float"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.slew.rate.scale"
desc = """  Slew rate scale factor.

            Scales the angular rate of all slews as a proportion of the maximum rate.

            Note that the maximum rate envelope is based on the RW max momentum and the spacecraft inertia.

            This can be useful for allocating some RW momentum to the null space controller and external disturbances."""
data_type = "float"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "adcs.slew.rate.limit"
desc = """  Slew rate limit.

            Limits the angular rate of all slews to not exceed this value."""
data_type = "float"
readonly = true
active = true
units = "radians / second"
valid_range = ""

[[saps]]
sap_key = "adcs.cbi2cbf.epoch"
desc = """  CBI to CBF epoch.

            Epoch for which the CBI to CBF angle adcs.cbi2cbf.angle is valid."""
data_type = "double"
active = true
units = "seconds"
valid_range = ""

[[saps]]
sap_key = "adcs.cbi2cbf.angle"
desc = """  CBI to CBF angle.

            Angle between Central Body Inertial (CBI, using True of Date) and Central Body Fixed (CBF, using ITRF)
            coordinate frames at the prescribed epoch, adcs.cbi2cbf.epoch."""
data_type = "double"
active = true
units = "radians"
valid_range = "[-3.14159265358979, 3.14159265358979]"

[[saps]]
sap_key = "adcs.rate.bias.est.limit"
desc = """  Rate bias estimation limit.
            Maximum allowable rate bias estimate by ADCS after gyro bias
            SAPs (e.g. adcs.saps.sensCorrSAPs.beta_gyro1) have been applied.
            Rate bias is estimated using star tracker solutions after attitude
            has been determined."""
data_type = "float"
active = true
units = "radians / second"
valid_range = "[0.0, 0.053]"

[[saps]]
sap_key = "adcs.q_tod2j2000.x"
desc = """  TOD to J2000 quaternion transformation, X component.

            X component of the quaternion transformation between the True of Date (TOD) and J2000 inertial coordinate
            frames.

            Used for converting star tracker measurements from J2000 to TOD.

            Must be updated regularly to maintain optimal pointing accuracy."""
data_type = "double"
active = true
units = ""
valid_range = "[-1.0, 1.0]"

[[saps]]
sap_key = "adcs.q_tod2j2000.y"
desc = """  TOD to J2000 quaternion transformation, Y component.

            Y component of the quaternion transformation between the True of Date (TOD) and J2000 inertial coordinate
            frames.

            Used for converting star tracker measurements from J2000 to TOD.

            Must be updated regularly to maintain optimal pointing accuracy."""
data_type = "double"
active = true
units = ""
valid_range = "[-1.0, 1.0]"

[[saps]]
sap_key = "adcs.q_tod2j2000.z"
desc = """  TOD to J2000 quaternion transformation, Z component.

            Z component of the quaternion transformation between the True of Date (TOD) and J2000 inertial coordinate
            frames.

            Used for converting star tracker measurements from J2000 to TOD.

            Must be updated regularly to maintain optimal pointing accuracy."""
data_type = "double"
active = true
units = ""
valid_range = "[-1.0, 1.0]"

[[saps]]
sap_key = "adcs.q_tod2j2000.s"
desc = """  TOD to J2000 quaternion transformation, scalar component.

            Scalar component of the quaternion transformation between the True of Date (TOD) and J2000 inertial
            coordinate frames.

            Used for converting star tracker measurements from J2000 to TOD.

            Must be updated regularly to maintain optimal pointing accuracy."""
data_type = "double"
active = true
units = ""
valid_range = "[-1.0, 1.0]"

[[saps]]
sap_key = "adcs.saps.str1.calStr.hash"
desc = """  Star Tracker 1 calibration structure identifier.

            Calibration structure identifier generated by hashing the binary file.

            Must be specified in decimal."""
active = true
data_type = "uint32"
units = ""
valid_range = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str1.ctrlStr.exposureLength"
desc = """  Star Tracker 1 camera exposure duration.

            Camera exposure duration (shutter length) for Star Tracker 1 star image.

            Longer exposures potentially detect more stars, but give worse streaking at high angular rate and increase
            the total time-to-solution."""
data_type = "single"
active = true
units = "s"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str1.ctrlStr.exp1Exp2Delta"
desc = """  Star Tracker 1 time between first and second exposure starts.

            Determines the time between the starts of the two exposures. If set shorter than the exposure length, the
            exposure length will be used instead.

            When set to a negative value (typically -1.0) the second exposure is inhibited (single-image mode). This
            makes the star tracker faster, but external rate information is now required."""
data_type = "single"
active = true
units = "s"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str1.ctrlStr.funcGoBitfield"
desc = """  Star Tracker 1 Functional GO bitfield.

            32-bit Functional GO bitfield allows the various ST processing stages to be enabled or disabled."""
data_type = "bitfield"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str1.ctrlStr.heaterSelect"
desc = """  Star Tracker 1 Heater Select bitfield.

            8-bit Heater Select bitfield allows various onboard heaters to be enabled. By setting this parameter to
            zero, all heater functions are disabled."""
data_type = "bitfield"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str1.ctrlStr.weightingAlgCtrl"
desc = """  Star Tracker 1 Weighting Algorithm Control bitfield.

            8-bit Weighting Algorithm Control bitfield sets use of intensity weighting and boundary penalties.

            Intensity weighting allows for brighter stars, which are presumed to have smaller centroid error, to be
            weighted above dimmer stars. Boundary penalties reduce the weighting of stars near the edge of the ROI,
            which may have erroneous centroids due to clipping effects.

            When bits are zero, all detected star vectors are weighted equally when the final quaternion is
            calculated."""
data_type = "bitfield"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str1.ctrlStr.heaterTarget"
desc = """  Star Tracker 1 heater target temperature.

            Adjusts the thermostat setpoint, which is compared to the detector temperature to determine when to apply
            heat."""
data_type = "int8"
active = true
units = "degC x 2"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str1.ctrlStr.threshRawThresh"
desc = """  Star Tracker 1 thresholding raw threshold.

            Determines the required brightness for a single pixel to be considered lit. Smaller values will detect more
            stars, but risk false stars and excessive processing time."""
data_type = "uint16"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str1.ctrlStr.litPixelLimit"
desc = """  Star Tracker 1 lit pixel limit.

            The total number of lit pixels permitted in an image is: 1,000,000/(Lit Pixel Limit+1).

            The star tracker will abort processing an image if the number of lit pixels approaches this value.

            Example: A lit pixel limit of 0 means 1 million pixels are permitted.

            * Set high: more scenes will abort, but the maximum time-to-reply is reduced.
            * Set low: fewer scenes will abort, but the star tracker may take a long time to process bright scenes.

            Does not take effect until Star Tracker is power cycled."""
data_type = "uint16"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str1.ctrlStr.threshAlg"
desc = """  Star Tracker 1 Thresholding Algorithm bitfield.

            8-bit Thresholding Algorithm bitfield sets use of adaptive thresholds and two-pass centroiding.

            If adaptive thresholds are selected then the average brightness of a 128 pixel wide row window
            is subtracted from a pixel's brightness before the raw threshold comparison is made. This compensates
            for elevated background due to stray light.

            If two-pass centroiding is selected then centroids will only be calculated for the best candidate stars
            based on their total brightness. Setting this bit can give a speed improvement for a scene with many lit
            pixels."""
data_type = "bitfield"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str1.ephemCtrlByte"
desc = """  Star Tracker 1 Ephemeris Control bitfield.

            8-bit Ephemeris control bitfield sets the level of stellar aberration correction.

            Keplerian elements are written to the star tracker at initialization for this purpose."""
data_type = "bitfield"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.calStr.hash"
desc = """  Star Tracker 2 calibration structure identifier.

            Calibration structure identifier generated by hashing the binary file.

            Must be specified in decimal."""
data_type = "uint32"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.ctrlStr.exposureLength"
desc = """  Star Tracker 2 camera exposure duration.

            Camera exposure duration (shutter length) for Star Tracker 1 star image.

            Longer exposures potentially detect more stars, but give worse streaking at high angular rate and increase
            the total time-to-solution."""
data_type = "single"
active = true
units = "s"


[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.ctrlStr.exp1Exp2Delta"
desc = """  Star Tracker 2 time between first and second exposure starts.

            Determines the time between the starts of the two exposures. If set shorter than the exposure length, the
            exposure length will be used instead.

            When set to a negative value (typically -1.0) the second exposure is inhibited (single-image mode).
            This makes the star tracker faster, but external rate information is now required."""
data_type = "single"
active = true
units = "s"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.ctrlStr.funcGoBitfield"
desc = """  Star Tracker 2 Functional GO bitfield.

            32-bit Functional GO bitfield allows the various ST processing stages to be enabled or disabled."""
data_type = "bitfield"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.ctrlStr.heaterSelect"
desc = """  Star Tracker 2 Heater Select bitfield.

            8-bit Heater Select bitfield allows various onboard heaters to be enabled. By setting this parameter
            to zero, all heater functions are disabled."""
data_type = "bitfield"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.ctrlStr.weightingAlgCtrl"
desc = """  Star Tracker 2 Weighting Algorithm Control bitfield.

            8-bit Weighting Algorithm Control bitfield sets use of intensity weighting and boundary penalties.

            Intensity weighting allows for brighter stars, which are presumed to have smaller centroid error, to be
            weighted above dimmer stars. Boundary penalties reduce the weighting of stars near the edge of the ROI,
            which may have erroneous centroids due to clipping effects.

            When bits are zero, all detected star vectors are weighted equally when the final quaternion is
            calculated."""
data_type = "bitfield"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.ctrlStr.heaterTarget"
desc = """  Star Tracker 2 heater target temperature.

            Adjusts the thermostat setpoint, which is compared to the detector temperature to determine when to apply
            heat."""
data_type = "int8"
active = true
units = "degC x 2"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.ctrlStr.threshRawThresh"
desc = """  Star Tracker 2 thresholding raw threshold.

            Determines the required brightness for a single pixel to be considered lit. Smaller values will detect more
            stars, but risk false stars and excessive processing time."""
data_type = "uint16"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.ctrlStr.litPixelLimit"
desc = """  Star Tracker 2 lit pixel limit.

            The total number of lit pixels permitted in an image is: 1,000,000/(Lit Pixel Limit+1)

            The star tracker will abort processing an image if the number of lit pixels approaches this value.

            Example: A lit pixel limit of 0 means 1 million pixels are permitted.

            * Set high: more scenes will abort, but the maximum time-to-reply is reduced.
            * Set low: fewer scenes will abort, but the star tracker may take a long time to process bright scenes.

            Does not take effect until Star Tracker is power cycled."""
data_type = "uint16"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.ctrlStr.threshAlg"
desc = """  Star Tracker 2 Thresholding Algorithm bitfield.

            8-bit Thresholding Algorithm bitfield sets use of adaptive thresholds and two-pass centroiding.

            If adaptive thresholds are selected then the average brightness of a 128 pixel wide row window is
            subtracted from a pixel's brightness before the raw threshold comparison is made. This compensates for
            elevated background due to stray light.

            If two-pass centroiding is selected then centroids will only be calculated for the best candidate stars
            based on their total brightness. Setting this bit can give a speed improvement for a scene with many lit
            pixels."""
data_type = "bitfield"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.str2.ephemCtrlByte"
desc = """  Star Tracker 2 Ephemeris Control bitfield.

            8-bit Ephemeris control bitfield sets the level of stellar aberration correction.

            Keplerian elements are written to the star tracker at initialization for this purpose."""
data_type = "bitfield"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.gocode.aecEnabled"
desc = """  Automatic Exposure Control bit in Fine Sun Sensor GO bitfield.

            Automatic Exposure Control (AEC) sets the exposure length for the upcoming exposure based on the max
            brightness, target brightness, and exposure length of the previous image subject to the constraints
            of max/min exposure."""
data_type = "boolean"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.gocode.exposureEnabled"
desc = """  Exposure Enabled bit in Fine Sun Sensor GO bitfield.

            Enables exposure, i.e. waits for a period determined by exposure length to allow the detector to integrate
            incoming photons.

            Note that the detector will only be powered on if readout is also enabled."""
data_type = "boolean"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.gocode.darkSubEnabled"
desc = """  Dark Subtract Enabled bit in Fine Sun Sensor GO bitfield.

            Enables acquisition of a dummy image with a negligibly short exposure time in order to measure the dark
            offset of individual pixels and of the ADC.

            When the operating image is acquired, the dummy image is subtracted from it. This has the effect of
            canceling pixel offset variations.

            In order to use dark subtract properly, readout must also be enabled."""
data_type = "boolean"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.gocode.readOutEnabled"
desc = """  Readout Enabled bit in Fine Sun Sensor GO bitfield.

            Enables transfer of data from the detector to the operating image buffer once the exposure is complete.

            Following readout the detector is powered down."""
data_type = "boolean"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.gocode.copyToEnabled"
desc = """  Copy to Offline Enabled bit in Fine Sun Sensor GO bitfield.

            If this bit is set, the operating image is copied to the offline image following readout.

            If copy from offline is also enabled then the two image buffers are exchanged."""
data_type = "boolean"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.gocode.copyFromEnabled"
desc = """  Copy from Offline Enabled bit in Fine Sun Sensor GO bitfield.

            If this bit is set, the offline image is copied to the operating image following readout.

            If copy to offline is also enabled then the two image buffers are exchanged."""
data_type = "boolean"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.gocode.fitEnabled"
desc = """  Fit Enabled bit in Fine Sun Sensor GO bitfield.

            Enables processing the operating image buffer to determine the Sun location. Runs for a number of
            iterations determined by the Iterations parameter.

            Its outputs [X, Y, Z] Vector, [X, Y, Z] Int, Fit Quality, and Image Quality."""
data_type = "boolean"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.gocode.reserved"
desc = """  Reserved bit in Fine Sun Sensor GO bitfield.

            Reserved. Read and write as 0."""
data_type = "boolean"
active = false
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.minExposure"
desc = """  Fine Sun Sensor minimum exposure.

            Minimum allowed exposure time setting for the FSS detector, measured in ticks of a 49 MHz clock.

            It may not be less than 1, nor greater than Max Exposure.

            At reset this is loaded with the default value."""
data_type = "uint32"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.maxExposure"
desc = """  Fine Sun Sensor maximum exposure.

            Maximum allowed exposure time setting for the FSS detector, measured in ticks of a 49 MHz clock.

            It may not be greater than 100,000,000 (2 seconds), nor less than Min Exposure.

            At reset this is loaded with the default value."""
data_type = "uint32"
active = true
units = ""

[[saps]]
valid_range = ""
desc = """  Fine Sun Sensor target brightness.

            Used by auto exposure control as the desired value for the brightest pixel in the image.

            It may not be less than 410 (10% of saturation) nor greater than 3686 (90% of saturation).

            At reset this is loaded with the default value."""
sap_key = "adcs.saps.fss.tgtBrightness"
data_type = "uint16"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.fss.iterations"
desc = """  Fine Sun Sensor iterations.

            Number of loop iterations the FSS fit solver uses.

            May be set between 0 to 20 iterations. More iterations may give a more accurate result, but require
            a longer processing time. Applications requiring low latency data may wish to reduce the iterations
            parameter as low as 5 without significant impact on accuracy.

            At reset this is loaded with the default value."""
data_type = "uint8"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.gps.maxVel"
desc = """  GPS Receiver maximum antenna velocity.

            Specifies maximum possible velocity of the receiver antenna for computing the required GPS satellite
            search zone."""
data_type = "int16"
active = false
units = "m/s"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.gps.maxAcc"
desc = """  GPS Receiver maximum antenna acceleration.

            Specifies maximum possible acceleration of the receiver antenna for computing the required GPS satellite
            search zone."""
data_type = "int16"
active = false
units = "m/s^2"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.gps.holdLastAlt"
desc = """  GPS Receiver hold last altitude.

            * on: Receiver can hold last computed altitude for position computation when number of GPS satellites is
                  not enough for conventional position computation.

            * off: Receiver is not allowed to hold last computed altitude."""
data_type = "boolean"
active = false
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.gps.eleMask"
desc = """  GPS Receiver Lock elevation mask.

            GPS Receiver will not lock to satellites below this elevation mask."""
data_type = "int16"
active = false
units = "deg"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.gps.eleOutMask"
desc = """  GPS Receiver Output elevation mask.

            Measurements for satellites whose elevation angles are less than the specified mask will not be output."""
data_type = "int16"
active = false
units = "deg"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.gps.eleMaskPos"
desc = """  GPS Receiver position computation elevation mask.

            GPS satellites with elevations lower than this mask will be excluded from position computation."""
data_type = "int16"
active = false
units = "deg"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.gps.pcodeTrack"
desc = """  GPS Receiver P-code tracking.

            * on: Enable P-code tracking, unconditionally.

            * off: Disable P-code tracking.

            Consider disabling P-code tracking to speed reacquisition."""
data_type = "boolean"
active = false
units = ""

[[saps]]
valid_range = "always, on, off"
sap_key = "adcs.saps.gps.L5Track"
desc = """  GPS Receiver L5 tracking.

            * always: Enable L5 tracking, unconditionally.

            * on: Enable L5 tracking, provided L5 is available for given satellite according to almanac.

            * off: Disable L5 tracking.

            Consider disabling L5 tracking to speed reacquisition."""
data_type = "string"
active = false
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.gps.dopLimit"
desc = """  GPS Receiver Degree of Precision Limit.

            Degree of precision limit for valid GPS position/velocity measurement."""
data_type = "float"
active = false
units = ""

[[saps]]
sap_key = "adcs.saps.rw1.disable"
desc = """  Disable Reaction Wheel 1.

            * When 1 (true), the rw-service will skip this device on init, or power it off if already init'd.
            * When 0 (false), the rw-service will init this device."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw1.currentBypassEnable"
desc = """  Enable Reaction Wheel 1 current bypass mode.

            If currentBypassEnable is enabled, sets the motor torque constant used to estimate motor current."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw1.motorKT"
desc = """  Reaction Wheel 1 current bypass mode motor torque constant.

            If currentBypassEnable is enabled, sets the motor torque constant used to estimate motor current."""
active = true
data_type = "float"
valid_range = "[0.001, 0.010]"
units = "N.m/Amps"

[[saps]]
sap_key = "adcs.saps.rw1.bypassGain"
desc = """  Reaction Wheel 1 current bypass mode motor current gain.

            If currentBypassEnable is enabled, sets the bypass gain (as a proxy for motor resistance) used to estimate
            motor current."""
active = true
data_type = "float"
valid_range = "[1.0, 8.0]"
units = ""

[[saps]]
sap_key = "adcs.saps.rw1.adcRefreshEnable"
desc = """  Enable Reaction Wheel 1 ADC refresh functionality.

            If enabled, RW1 will use the ADC Register Refresh function to mitigate an inoperative current sensor."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw2.disable"
desc = """  Disable Reaction Wheel 2.

            * When 1 (true), the rw-service will skip this device on init, or power it off if already init'd.
            * When 0 (false), the rw-service will init this device."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw2.currentBypassEnable"
desc = """  Enable Reaction Wheel 2 current bypass mode.

            If currentBypassEnable is enabled, sets the motor torque constant used to estimate motor current."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw2.motorKT"
desc = """  Reaction Wheel 2 current bypass mode motor torque constant.

            If currentBypassEnable is enabled, sets the motor torque constant used to estimate motor current."""
active = true
data_type = "float"
valid_range = "[0.001, 0.010]"
units = "N.m/Amps"

[[saps]]
sap_key = "adcs.saps.rw2.bypassGain"
desc = """  Reaction Wheel 2 current bypass mode motor current gain.

            If currentBypassEnable is enabled, sets the bypass gain (as a proxy for motor resistance) used to estimate
            motor current."""
active = true
data_type = "float"
valid_range = "[1.0, 8.0]"
units = ""

[[saps]]
sap_key = "adcs.saps.rw2.adcRefreshEnable"
desc = """  Enable Reaction Wheel 2 ADC refresh functionality.

            If enabled, RW1 will use the ADC Register Refresh function to mitigate an inoperative current sensor."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw3.disable"
desc = """  Disable Reaction Wheel 3.

            * When 1 (true), the rw-service will skip this device on init, or power it off if already init'd.
            * When 0 (false), the rw-service will init this device."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw3.currentBypassEnable"
desc = """  Enable Reaction Wheel 3 current bypass mode.

            If enabled, put the reaction wheel in Current Bypass mode to mitigate an inoperative current sensor."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw3.motorKT"
desc = """  Reaction Wheel 3 current bypass mode motor torque constant.

            If currentBypassEnable is enabled, sets the motor torque constant used to estimate motor current."""
active = true
data_type = "float"
valid_range = "[0.001, 0.010]"
units = "N.m/Amps"

[[saps]]
sap_key = "adcs.saps.rw3.bypassGain"
desc = """  Reaction Wheel 3 current bypass mode motor current gain.

            If currentBypassEnable is enabled, sets the bypass gain (as a proxy for motor resistance) used to estimate
            motor current."""
active = true
data_type = "float"
valid_range = "[1.0, 8.0]"
units = ""

[[saps]]
sap_key = "adcs.saps.rw3.adcRefreshEnable"
desc = """  Enable Reaction Wheel 3 ADC refresh functionality.

            If enabled, RW1 will use the ADC Register Refresh function to mitigate an inoperative current sensor."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw4.disable"
desc = """  Disable Reaction Wheel 4.

            * When 1 (true), the rw-service will skip this device on init, or power it off if already init'd.
            * When 0 (false), the rw-service will init this device."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw4.currentBypassEnable"
desc = """  Enable Reaction Wheel 4 current bypass mode.

            If enabled, put the reaction wheel in Current Bypass mode to mitigate an inoperative current sensor."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.rw4.motorKT"
desc = """  Reaction Wheel 4 current bypass mode motor torque constant.

            If currentBypassEnable is enabled, sets the motor torque constant used to estimate motor current."""
active = true
data_type = "float"
valid_range = "[0.001, 0.010]"
units = "N.m/Amps"

[[saps]]
sap_key = "adcs.saps.rw4.bypassGain"
desc = """  Reaction Wheel 4 current bypass mode motor current gain.

            If currentBypassEnable is enabled, sets the bypass gain (as a proxy for motor resistance) used to estimate
            motor current."""
active = true
data_type = "float"
valid_range = "[1.0, 8.0]"
units = ""

[[saps]]
sap_key = "adcs.saps.rw4.adcRefreshEnable"
desc = """  Enable Reaction Wheel 4 ADC refresh functionality.

            If enabled, RW1 will use the ADC Register Refresh function to mitigate an inoperative current sensor."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw1.speedLimit1"
data_type = "double"
active = true
units = "rad/s"
desc = "Reaction wheel 1 closed loop speed limit in rad/s; EDAC address 0x0CC - 0x0CF"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw1.speedLimit2"
data_type = "double"
active = true
units = "rad/s"
desc = "reaction wheel1 absolute speed limit in rad/s; EDAC address 0x0D0 - 0x0D3"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw2.speedLimit1"
data_type = "double"
active = true
units = "rad/s"
desc = "Reaction wheel 2 closed loop speed limit in rad/s; EDAC address 0x0CC - 0x0CF"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw2.speedLimit2"
data_type = "double"
active = true
units = "rad/s"
desc = "Reaction wheel 2 absolute speed limit in rad/s; EDAC address 0x0D0 - 0x0D3"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw3.speedLimit1"
data_type = "double"
active = true
units = "rad/s"
desc = "Reaction wheel 3 closed loop speed limit in rad/s; EDAC address 0x0CC - 0x0CF"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw3.speedLimit2"
data_type = "double"
active = true
units = "rad/s"
desc = "Reaction wheel 3 absolute speed limit in rad/s; EDAC address 0x0D0 - 0x0D3"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw4.speedLimit1"
data_type = "double"
active = true
units = "rad/s"
desc = "Reaction wheel 4 closed loop speed limit in rad/s; EDAC address 0x0CC - 0x0CF"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw4.speedLimit2"
data_type = "double"
active = true
units = "rad/s"
desc = "Reaction wheel 4 absolute speed limit in rad/s; EDAC address 0x0D0 - 0x0D3"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw1.currentLimit"
data_type = "double"
active = true
units = "Amps"
desc = "Reaction wheel 1 current limit in Amperes; EDAC address 0x0D4 - 0x00D7"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw2.currentLimit"
data_type = "double"
active = true
units = "Amps"
desc = "Reaction wheel 2 current limit in Amperes; EDAC address 0x0D4 - 0x00D7"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw3.currentLimit"
data_type = "double"
active = true
units = "Amps"
desc = "Reaction wheel 3 current limit in Amperes; EDAC address 0x0D4 - 0x00D7"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.rw4.currentLimit"
data_type = "double"
active = true
units = "Amps"
desc = "Reaction wheel 4 current limit in Amperes; EDAC address 0x0D4 - 0x00D7"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.qStr1Align[0]"
desc = """  Star Tracker 1 misalignment correction quaternion, X component.

            X component of the quaternion representing the transformation between the misaligned ST1 frame to the
            nominal ST1 frame."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.qStr1Align[1]"
desc = """  Star Tracker 1 misalignment correction quaternion, Y component.

            Y component of the quaternion representing the transformation between the misaligned ST1 frame to the
            nominal ST1 frame."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.qStr1Align[2]"
desc = """  Star Tracker 1 Misalignment Correction Quaternion, Z Component.

            Z component of the quaternion representing the transformation between the misaligned ST1 frame to the
            nominal ST1 frame."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.qStr1Align[3]"
desc = """  Star Tracker 1 Misalignment Correction Quaternion, Scalar Component.

            Scalar component of the quaternion representing the transformation between the misaligned ST1 frame to the
            nominal ST1 frame."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.qStr2Align[0]"
data_type = "double"
desc = """  Star Tracker 2 Misalignment Correction Quaternion, X Component.

            X component of the quaternion representing the transformation between the misaligned ST2 frame to the
            nominal ST2 frame."""
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.qStr2Align[1]"
desc = """  Star Tracker 2 Misalignment Correction Quaternion, Y Component.

            Y component of the quaternion representing the transformation between the misaligned ST2 frame to the
            nominal ST2 frame."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.qStr2Align[2]"
desc = """  Star Tracker 2 Misalignment Correction Quaternion, Z Component.

            Z component of the quaternion representing the transformation between the misaligned ST2 frame to the
            nominal ST2 frame."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.qStr2Align[3]"
desc = """  Star Tracker 2 Misalignment Correction Quaternion, Scalar Component.

            Scalar component of the quaternion representing the transformation between the misaligned ST2 frame to the
            nominal ST2 frame."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro1[0]"
desc = """  IMU1 Gyro Orthogonality Matrix, XX Component.

            XX component of IMU1 gyro non-orthogonality correction matrix.

            Row 1, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro1[1]"
desc = """  IMU1 Gyro Orthogonality Matrix, YX Component.

            YX component of IMU1 gyro non-orthogonality correction matrix.

            Row 2, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro1[2]"
desc = """  IMU1 Gyro Orthogonality Matrix, ZX Component.

            ZX component of IMU1 gyro non-orthogonality correction matrix.

            Row 3, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro1[3]"
desc = """  IMU1 Gyro Orthogonality Matrix, XY Component.

            XY component of IMU1 gyro non-orthogonality correction matrix.

            Row 1, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro1[4]"
desc = """  IMU1 Gyro Orthogonality Matrix, YY Component.

            YY component of IMU1 gyro non-orthogonality correction matrix.

            Row 2, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro1[5]"
desc = """  IMU1 Gyro Orthogonality Matrix, ZY Component.

            ZY component of IMU1 gyro non-orthogonality correction matrix.

            Row 3, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro1[6]"
desc = """  IMU1 Gyro Orthogonality Matrix, XZ Component.

            XZ component of IMU1 gyro non-orthogonality correction matrix.

            Row 1, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro1[7]"
desc = """  IMU1 Gyro Orthogonality Matrix, YZ Component.

            YZ component of IMU1 gyro non-orthogonality correction matrix.

            Row 2, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro1[8]"
desc = """  IMU1 Gyro Orthogonality Matrix, ZZ Component.

            ZZ component of IMU1 gyro non-orthogonality correction matrix.

            Row 3, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.K_gyro1[0]"
desc = """  IMU1 Gyro Scale Factor Matrix, XX Component.

            XX component of IMU1 gyro scale factor correction matrix.

            Row 1, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.K_gyro1[4]"
desc = """  IMU1 Gyro Scale Factor Matrix, YY Component.

            YY component of IMU1 gyro scale factor correction matrix.

            Row 2, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.K_gyro1[8]"
desc = """  IMU1 Gyro Scale Factor Matrix, ZZ Component.

            ZZ component of IMU1 gyro scale factor correction matrix.

            Row 3, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.beta_gyro1[0]"
desc = """  IMU1 Gyro Bias, X Component.

            X component of IMU1 gyro bias correction vector."""
data_type = "double"
active = true
units = "deg/s"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.beta_gyro1[1]"
desc = """  IMU1 Gyro Bias, Y Component.

            Y component of IMU1 gyro bias correction vector."""
data_type = "double"
active = true
units = "deg/s"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.beta_gyro1[2]"
desc = """  IMU1 Gyro Bias, Z Component.

            Z component of IMU1 gyro bias correction vector."""
data_type = "double"
active = true
units = "deg/s"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro2[0]"
desc = """  IMU2 Gyro Orthogonality Matrix, XX Component.

            XX component of IMU2 gyro non-orthogonality correction matrix.

            Row 1, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro2[1]"
desc = """  IMU2 Gyro Orthogonality Matrix, YX Component.

            YX component of IMU2 gyro non-orthogonality correction matrix.

            Row 2, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro2[2]"
desc = """  IMU2 Gyro Orthogonality Matrix, ZX Component.

            ZX component of IMU2 gyro non-orthogonality correction matrix.

            Row 3, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro2[3]"
desc = """  IMU2 Gyro Orthogonality Matrix, XY Component.

            XY component of IMU2 gyro non-orthogonality correction matrix.

            Row 1, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro2[4]"
desc = """  IMU2 Gyro Orthogonality Matrix, YY Component.

            YY component of IMU2 gyro non-orthogonality correction matrix.

            Row 2, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro2[5]"
desc = """  IMU2 Gyro Orthogonality Matrix, ZY Component.

            ZY component of IMU2 gyro non-orthogonality correction matrix.

            Row 3, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro2[6]"
desc = """  IMU2 Gyro Orthogonality Matrix, XZ Component.

            XZ component of IMU2 gyro non-orthogonality correction matrix.

            Row 1, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro2[7]"
desc = """  IMU2 Gyro Orthogonality Matrix, YZ Component.

            YZ component of IMU2 gyro non-orthogonality correction matrix.

            Row 2, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_gyro2[8]"
desc = """  IMU2 Gyro Orthogonality Matrix, ZZ Component.

            ZZ component of IMU2 gyro non-orthogonality correction matrix.

            Row 3, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.K_gyro2[0]"
desc = """  IMU2 Gyro Scale Factor Matrix, XX Component.

            XX component of IMU2 gyro scale factor correction matrix.

            Row 1, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.K_gyro2[4]"
desc = """  IMU2 Gyro Scale Factor Matrix, YY Component.

            YY component of IMU2 gyro scale factor correction matrix.

            Row 2, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.K_gyro2[8]"
desc = """  IMU2 Gyro Scale Factor Matrix, ZZ Component.

            ZZ component of IMU2 gyro scale factor correction matrix.

            Row 3, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.beta_gyro2[0]"
desc = """  IMU2 Gyro Bias, X Component.

            X component of IMU2 gyro bias correction vector."""
data_type = "double"
active = true
units = "deg/s"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.beta_gyro2[1]"
desc = """  IMU2 Gyro Bias, Y Component.

            Y component of IMU2 gyro bias correction vector."""
data_type = "double"
active = true
units = "deg/s"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.beta_gyro2[2]"
desc = """  IMU2 Gyro Bias, Z Component.

            Z component of IMU2 gyro bias correction vector."""
data_type = "double"
active = true
units = "deg/s"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_mag[0]"
desc = """  Magnetometer Correction Matrix, XX Component.

            XX component of Magnetometer scale factor and non-orthogonality correction matrix.

            Row 1, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_mag[1]"
desc = """  Magnetometer Correction Matrix, YX Component.

            YX component of Magnetometer scale factor and non-orthogonality correction matrix.

            Row 2, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_mag[2]"
desc = """  Magnetometer Correction Matrix, ZX Component.

            ZX component of Magnetometer scale factor and non-orthogonality correction matrix.

            Row 3, Column 1."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_mag[3]"
desc = """  Magnetometer Correction Matrix, XY Component.

            XY component of Magnetometer scale factor and non-orthogonality correction matrix.

            Row 1, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_mag[4]"
desc = """  Magnetometer Correction Matrix, YY Component.

            YY component of Magnetometer scale factor and non-orthogonality correction matrix.

            Row 2, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_mag[5]"
desc = """  Magnetometer Correction Matrix, ZY Component.

            ZY component of Magnetometer scale factor and non-orthogonality correction matrix.

            Row 3, Column 2."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_mag[6]"
desc = """  Magnetometer Correction Matrix, XZ Component.

            XZ component of Magnetometer scale factor and non-orthogonality correction matrix.

            Row 1, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_mag[7]"
desc = """  Magnetometer Correction Matrix, YZ Component.

            YZ component of Magnetometer scale factor and non-orthogonality correction matrix.

            Row 2, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.T_mag[8]"
desc = """  Magnetometer Correction Matrix, ZZ Component.

            ZZ component of Magnetometer scale factor and non-orthogonality correction matrix.

            Row 3, Column 3."""
data_type = "double"
active = true
units = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.beta_mag[0]"
desc = """  Magnetometer Bias, X Component.

            X component of Magnetometer bias correction vector."""
data_type = "double"
active = true
units = "nT"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.beta_mag[1]"
desc = """  Magnetometer Bias, Y Component.

            Y component of Magnetometer bias correction vector."""
data_type = "double"
active = true
units = "nT"

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.beta_mag[2]"
desc = """  Magnetometer Bias, Z Component.

            Z component of Magnetometer bias correction vector."""
data_type = "double"
active = true
units = "nT"

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.k_css[0]"
desc = """  Coarse Sun Sensor 1 (+X) scale factor.

            CSS 1 (+X body axis) solar intensity scale factor."""
data_type = "double"
active = true
units = "Volts"
valid_range = "[0.0, 15.0]"

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.k_css[1]"
desc = """  Coarse Sun Sensor 2 (+Y) scale factor.

            CSS 2 (+Y body axis) solar intensity scale factor."""
data_type = "double"
active = true
units = "Volts"
valid_range = "[0.0, 15.0]"

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.k_css[2]"
desc = """  Coarse Sun Sensor 3 (+Z) scale factor.

            CSS 3 (+Z body axis) solar intensity scale factor."""
data_type = "double"
active = true
units = "Volts"
valid_range = "[0.0, 15.0]"

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.k_css[3]"
desc = """  Coarse Sun Sensor 4 (-X) scale factor.

            CSS 4 (-X body axis) solar intensity scale factor."""
data_type = "double"
active = true
units = "Volts"
valid_range = "[0.0, 15.0]"

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.k_css[4]"
desc = """  Coarse Sun Sensor 5 (-Y) scale factor.

            CSS 5 (-Y body axis) solar intensity scale factor."""
data_type = "double"
active = true
units = "Volts"
valid_range = "[0.0, 15.0]"

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.k_css[5]"
desc = """  Coarse Sun Sensor 6 (-Z) scale factor.

            CSS 6 (-Z body axis) solar intensity scale factor."""
data_type = "double"
active = true
units = "Volts"
valid_range = "[0.0, 15.0]"

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.beta_css[0]"
desc = """  Coarse Sun Sensor 1 (+X) bias.

            CSS 1 (+X body axis) voltage bias."""
data_type = "double"
active = true
units = "Volts"
valid_range = ""

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.beta_css[1]"
desc = """  Coarse Sun Sensor 2 (+Y) bias.

            CSS 2 (+Y body axis) voltage bias."""
data_type = "double"
active = true
units = "Volts"
valid_range = ""

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.beta_css[2]"
desc = """  Coarse Sun Sensor 3 (+Z) bias.

            CSS 3 (+Z body axis) voltage bias."""
data_type = "double"
active = true
units = "Volts"
valid_range = ""

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.beta_css[3]"
desc = """  Coarse Sun Sensor 4 (-X) bias.

            CSS 4 (-X body axis) voltage bias."""
data_type = "double"
active = true
units = "Volts"
valid_range = ""

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.beta_css[4]"
desc = """  Coarse Sun Sensor 5 (-Y) bias.

            CSS 5 (-Y body axis) voltage bias."""
data_type = "double"
active = true
units = "Volts"
valid_range = ""

[[saps]]
sap_key = "adcs.saps.sensCorrSAPs.beta_css[5]"
desc = """  Coarse Sun Sensor 6 (-Z) bias.

            CSS 6 (-Z body axis) voltage bias."""
data_type = "double"
active = true
units = "Volts"
valid_range = ""

[[saps]]
valid_range = ""
sap_key = "adcs.saps.sensCorrSAPs.fssTminValid"
data_type = "double"
active = true
units = "seconds"
desc = "FSS glitch filter window size, 0 disables filter"

[[saps]]
valid_range = "[1, 2]"
sap_key = "adcs.saps.sensCorrSAPs.gyro_select"
desc = """  Force use of IMU1 or IMU2.

            This is a hint provided to the spacecraft. Upon IMU faults (failure to initialize, repeated errors
            communicating), the spacecraft fails over to the other IMU, regardless of the value of this SAP. The
            spacecraft can be forced again to use a specific IMU by updating this SAP to clear the fault."""
data_type = "uint8"
active = true
units = ""

[[saps]]
sap_key = "adcs.saps.sunSearchPositive"
desc = """  Force unidirectional Sun Search rotation.

            When 0 (false), the SunSearch submode of the SunAcq AC mode will (using the total momentum estimate) rotate
            either positively or negatively about a specified body axis to best avoid reaction wheel saturation. Note
            that using a noisy, near-zero momentum estimate, combined with spurious Fine Sun Sensor measurements that
            intermittently activate/deactivate SunSearch, may lead to reaction wheel heatup.

            When 1 (true), the SunSearch submode of the SunAcq AC mode rotate unidirectionally (positive by right hand
            rule) about the specified body axis."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.alarm.imuerror.enable"
desc = """  Enable/Disable (1/0) ADCS IMU Error.

            ADCS internally assesses the validity of IMU gyro rate measurements (e.g. for noise implying impossibly
            high acceleration) and tracks IMU validity staleness with a telemetry monitor.

            If IMU staleness telemetry monitor is triggered, and this SAP is enabled, a signal will be sent to
            imu-service to handle the event as an IMU failure. The service will respond with IMU reinitialization or
            IMU failover and may trigger a spacecraft alarm."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.alarm.covarerr.enable"
desc = """  Enable/Disable (1/0) ADCS High Covariance Error ALARM.

            ADCS tracks the covariance of the Kalman filter attitude estimate with a telemetry monitor.

            If the high covariance telemetry monitor is triggered, and this SAP is enabled, the spacecraft will
            ALARM."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.saps.alarm.ctrlerr.enable"
desc = """  Enable/Disable (1/0) ADCS High Control Error ALARM.

            ADCS tracks the attitude control error (desired vs estimated attitude) with a telemetry monitor.

            If the high control error telemetry monitor is triggered, and this SAP is enabled, the spacecraft will
            ALARM."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "adcs.fdir.slew.duration.limit.high"
desc = "Maximum duration of RendezSlew in seconds"
active = true
data_type = "float"
valid_range = "[500, 3600]"
units = "seconds"

[[saps]]
sap_key = "adcs.fdir.slew.duration.limit.high.enable"
desc = "If enabled then abort RendezSlews with durations > adcs.fdir.slew.duration.limit.high"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "gps.powerOnDelayUs"
desc = """  Delay before turning on power.

            Applies to normal power-on and FDIR power-cycle."""
active = true
data_type = "uint32"
valid_range = "[200000, 60000000]"
units = "microsec"

[[saps]]
sap_key = "gps.disable"
desc = """ When 1 (true), the gps-service will skip GPS on init, or power it off if already init'd.
           When 0 (false), the gps-service will init GPS device."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "gps.staticClockFrequencyOffsetPpm"
desc = """ Frequency offset to apply to the system clock when the GPS is disabled (see gps.disable)
           and the GPS unit is not driving the FCPU pulse per second (PPS) line.

           This is an adjustment to the amount of oscillator ticks are in the Linux kernel 'tick'.

           Positive values 'slow' the system clock down while negative values 'speed up' the clock.
           This static value is to help offset the time dilations due to the temperature that the
           oscillator of the CPU is running at. The temperature of the oscillator will still vary
           over the course of the orbit, so this will never provide a 'perfect' time, but it can
           be tuned to receive a better 'average' time over the orbit.

           See the 'timex.freq' of the 'adjtimex(2)' C API function.
           """
active = true
data_type = "float"
valid_range = "[-500.0, 500.0]"
units = "parts per million"

[[saps]]
sap_key = "gps.leap_seconds"
desc = """ GPS leap seconds to use while GPS unit is acquiring the almanac.

           The gps-service may not know the value of GPS Leap Seconds for as long as it takes to
           get the GPS almanac loaded from the GPS constellation - 12.5 minutes. Because this value
           is very static the SAP will always be used. It must be periodically upated by the the
           Ground Control as GPS Leap Second updates become available.

           https://www.nist.gov/pml/time-and-frequency-division/time-realization/leap-seconds

           As of 2021-30-20:
           2524521600      19      # 1 Jan 1980
           3692217600      37      # 1 Jan 2017
                           37 - 19 = 18 which is the current default value of the SAP

           When the GPS does obtain the almanac, if it detects that the receiver Leap Seconds
           differs from the SAP value, the gps-service prints a warning message of the form:

           WARNING: GPS Leap Second SAP 18 != 19

           - where 18 (for example) is the current SAP setting.
           - where 19 (for example) is the GPS receiver value.
           """
valid_range = "[18, 1000000]"
data_type = "uint32"
units = "seconds"
active = true

[[saps]]
sap_key = "gps.maxdop"
desc = """  Maximum GPS PDOP for valid reading.

            If the adcs.meas.gpsPdop telemetry point is greater than this value, ADCS will not use
            GPS data to determine position nor velocity."""
valid_range = "[1.0, 99.0]"
data_type = "float"
units = ""
active = true

[[saps]]
sap_key = "gps.numStoredRecords"
desc = """ Number of readings from the GPS unit to store in volatile memory.
           * When zero the service will not maintain a store of GPS records.
       """
active = true
data_type = "uint32"
valid_range = "[0, 80]"
units = ""

[[saps]]
sap_key = "gps.RecordsDecimationFactor"
desc = """ Number of seconds to skip in between stored GPS records.

           For example when factor is 1 the service will store a GPS record at 1 Hz.
           With a factor of 4 it will store a record every 4 seconds.
       """
active = true
data_type = "uint32"
valid_range = "[1, 200]"
units = ""

[[saps]]
sap_key = "gps.settime.holdoff1"
desc = """ Fast GPS Set SysTime holdoff for valid Pos/Vel
"""
active = true
data_type = "uint32"
valid_range = "[10, 1200]"
units = "seconds"

[[saps]]
sap_key = "gps.settime.holdoff2"
desc = """ Slow GPS Set SysTime holdoff for invalid Pos/Vel
"""
active = true
data_type = "uint32"
valid_range = "[10, 1200]"
units = "seconds"

[[saps]]
sap_key = "gps.antispoof.elev.min"
desc = """ GPS antispoof minimum elevation.
           * zero value disables GPS spoof checking.
"""
active = true
data_type = "float"
valid_range = "[0.0, 700.0e+3]"
units = "m"

[[saps]]
sap_key = "gps.antispoof.elev.max"
desc = """ GPS antispoof maximum elevation.
"""
active = true
data_type = "float"
valid_range = "[0.0, 700.0e+3]"
units = "m"

[[saps]]
sap_key = "gps.antispoof.vel.min"
desc = """ GPS antispoof minimum velocity.
"""
active = true
data_type = "float"
valid_range = "[0.0, 10.0e+3]"
units = "m"

[[saps]]
sap_key = "gps.antispoof.vel.max"
desc = """ GPS antispoof maximum velocity.
"""
active = true
data_type = "float"
valid_range = "[0.0, 10.0e+3]"
units = "m"


[[saps]]
sap_key = "gps.pps.disable"
desc = "When 1 (true), disable GPS PPS time correction."
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "gps.dlr.pv.expire"
desc = """ The maximum age in seconds of the Position/Velocity data
           which can be used by the DLR GPS for assisted restart.
           An maximum age of 0 indicates disable PV assist."""
valid_range = "[0, 65535]"
data_type = "uint16"
units = "seconds"
active = true

[[saps]]
sap_key = "gps.dlr.nolock.timeout"
desc = """ The number minutes with no GPS Lock before power is cycled.
           0 disables timeout"""
valid_range = "[0, 240]"
data_type = "uint16"
units = "minutes"
active = true

[[saps]]
sap_key = "gps.dlr.nolock.maxcnt"
desc = """ The maximum number of consecutive gps.dlr.nolock.timeout
           events allowed before all DLR GPS persistence files are
           deleted, and then power is cycled."""
valid_range = "[1, 20]"
data_type = "uint16"
units = "minutes"
active = true

[[saps]]
sap_key = "gps.dlr.almanac.save.interval"
desc = """ The Interval in minutes at which the DLR GPS Almanac/Ephemeris
           data is to be saved to FCPU non-volatile memory.
           A value of 0 indicates disable autosave."""
valid_range = "[0, 14400]"
data_type = "uint16"
units = "minutes"
active = true

[[saps]]
sap_key = "gps.dlr.em"
desc = "DLR GPS receiver elevation mask (EM)"
valid_range = "[-90.0, 90.0]"
data_type = "float"
units = "degrees"
active = true

[[saps]]
sap_key = "gps.dlr.pm"
desc = "DLR GPS PDOP mask (PM)"
valid_range = "[1.0, 99.0]"
data_type = "float"
units = ""
active = true

[[saps]]
sap_key = "gps.dlr.dw"
desc = "DLR GPS Extended Frequency Search Doppler Window (DW)"
valid_range = "[0, 40000]"
data_type = "uint16"
units = "hz"
active = true

[[saps]]
sap_key = "gps.dlr.mc"
desc = """ DLR GPS Media Correction (MC)
           Bit0 Ionospheric correction (0=disabled, 1=enabled)
           Bit1 Tropospheric correction (0=disabled, 1=enabled) """
valid_range = "[0, 3]"
data_type = "uint8"
units = ""
active = true


[[saps]]
sap_key = "uhf.disable"
desc = """ When 1 (true), the comms-service will skip UHF on init, or power it off if already init'd.
           When 0 (false), the comms-service will init UHF device."""
active = false
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "uhf.temp.limit.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "uhf.temp.limit"
active = false

[[saps]]
sap_key = "uhf.temp.limit.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "uhf.temp.limit"
active = false

[[saps]]
sap_key = "uhf.temp.limit.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "uhf.temp.limit"
active = false

[[saps]]
sap_key = "uhf.temp.limit.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "uhf.temp.limit"
active = false

[[saps]]
sap_key = "xBandRadio.xmit.power.dbm"
desc = "Transmit power of the X-Band radio"
data_type = "uint32"
active = true
units = "dbm"
valid_range = "[30, 39]"

[[saps]]
sap_key = "xBandRadio.temp.limit.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "xBandRadio.temp.limit"
active = false

[[saps]]
sap_key = "xBandRadio.temp.limit.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "xBandRadio.temp.limit"
active = false

[[saps]]
sap_key = "xBandRadio.temp.limit.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "xBandRadio.temp.limit"
active = false

[[saps]]
sap_key = "xBandRadio.temp.limit.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "xBandRadio.temp.limit"
active = false


#
# Propulsion SAPs
#
# NOTE: Any registers which are not exposed to SAPs or telemetry are either set directly by the
#       prop FSW algorithms or completely unused by the script.
#
# Propulsion SAPs are all prefixed as follows to distinguish between the different sources of
# telemetry
#
# * "prop.fsw.*" - SAPs for the propulsion flight software itself - These SAPs do not directly
#       affect the propulsion device
# * "prop.system.*" - SAPs affecting the general propulsion device control software
# * "prop.tank.*" - SAPs associated with the propellant tanks
# * "prop.core.*" - SAPs associated with the thruster core and surrounding components
# * "prop.external.*" - SAPs associated with the separate propellant tank heaters provided by the
#       PCU
#
# SAPs which directly set Comet-8000 device registers contain a "device_ref" element which is for
# documentation purposes only. This reference is the address of the register as documented in the
# "Comet software interface map".
#
# The descriptions below refer to two different types of modes.
#
# * "prop FSW mode" refers to the mode of the propulsion script as determined by the command that
#   is executing it.
# * "device mode" refers to the mode of the Comet-8000 device itself.
#
# Note that as the prop FSW executes a command in a given FSW mode, it can cause the Comet-8000
# to transition through various "device modes".
#
# Some of the SAPs end in "*.bakeout" and a "*.thrust". These represent two versions of the same
# SAP value. For these SAPs, the propulsion FSW will use the appropriate value depending on the
# mode the script is commanded to be in:
#
#  | Prop FSW mode (command) | SAP Suffix          |
#  | ----------------------- | ------------------- |
#  | telem                   | "*.bakeout"         |
#  | bakeout                 | "*.bakeout"         |
#  | thrust                  | "*.thrust"          |
#


[[saps]]
sap_key = "prop.fsw.bakeoutHeatingThrusterTimeout"
desc = """ Time to allow the thruster core superheater temperature to come to the bakeout set point

    The duration to wait for the thruster core temperature (prop.core.thrusterTemp) to reach
    prop.core.thrusterTemp.setPoint.bakeout while prop.fsw.mode is Bakeout and prop.fsw.state is
    HeatingThruster. If the thruster core fails to reach the desired temperature within this
    timeout, then the FSW will abort the bakeout process and transition prop.fsw.mode to Idle
    instead.
"""
data_type = "uint16"
units = "seconds"
valid_range = "[0, 800]"
active = true

[[saps]]
sap_key = "prop.fsw.bakeoutDuration"
desc = """ Time to bakeout the thruster

    While performing the bakeout operation, this represents the amount of time to remain in the
    prop.fsw.state of BakingOut.
"""
data_type = "uint16"
units = "seconds"
valid_range = "[0, 2400]"
active = true

[[saps]]
sap_key = "prop.core.thermostatOutputLimit.bakeout"
device_ref = "0x0404"
desc = """ Power limit of the thruster core superheater temperature controller for the FSW modes bakeout and telem.

    The power output of the thruster core superheater temperature controller will be limited to
    this value, which in turn limits how fast the prop.core.thrusterTemp telemetry point will
    increase to match the prop.core.thrusterTemp.setPoint telemetry point. This limit can be used to
    adjust the unit's peak power consumption during thruster preheat and thrusting.
"""
data_type = "float"
units = "volts"
valid_range = "[0.0, 8.0]"
active = true

[[saps]]
sap_key = "prop.core.thermostatOutputLimit.thrust"
device_ref = "0x0404"
desc = """ Power limit of the thruster core superheater temperature controller for the FSW mode thrust.

    The power output of the thruster core superheater temperature controller will be limited to
    this value, which in turn limits how fast the prop.core.thrusterTemp telemetry point will
    increase to match the prop.core.thrusterTemp.setPoint telemetry point.  This limit can be used
    to adjust the unit's peak power consumption during thruster preheat and thrusting.
"""
data_type = "float"
units = "volts"
valid_range = "[0.0, 34.0]"
active = true

[[saps]]
sap_key = "prop.core.lowTempInhibitLimit"
device_ref = "0x0408"
desc = """ Thruster core inhibit low temperature limit.

    Thrust maneuvers will fail to execute if the prop.core.thrusterTemp telemetry point is below
    this limit when the prop FSW transitions prop.fsw.state to Thrust or while prop.fsw.state
    currently is Thrusting. If this happens, the prop FSW will transition to its Idle state and
    collect telemetry.
"""
data_type = "float"
units = "degrees Celsius"
valid_range = "[-30.0, 1200.0]"
active = true

[[saps]]
sap_key = "prop.tank.lowPressureInhibitLimit"
device_ref = "0x040c"
desc = """ Propellant tank low pressure inhibit limit.

    Thrust maneuvers will fail to execute if the prop.tank.pressure telemetry point is below this
    pressure when the prop FSW attempts transition prop.fsw.state to Thrust. If this happens, the
    prop FSW will transition to its Idle state and collect telemetry.

    NOTE: A low tank pressure does NOT abort a thrust in progress.
"""
data_type = "float"
units = "psia"
valid_range = "[-15.6, 126.0]"
active = true

[[saps]]
sap_key = "prop.core.highTempAlarmLimit.bakeout"
device_ref = "0x0410"
desc = """ Thruster core alarm temperature limit for the prop FSW modes bakeout and telem

    Temperature regulation of the thruster core is halted while the prop.core.thrusterTemp
    telemetry point exceeds this limit. The alarm is automatically cleared after the thruster core
    temperature is lower than this limit and temperature regulation resumes as normal.
"""
data_type = "float"
units = "degrees Celsius"
valid_range = "[-30.0, 1200.0]"
active = true

[[saps]]
sap_key = "prop.core.highTempAlarmLimit.thrust"
device_ref = "0x0410"
desc = """ Thruster core abort temperature limit for the prop FSW mode thrust

    Temperature regulation of the thruster core is halted while the prop.core.thrusterTemp
    telemetry point exceeds this limit. The alarm is automatically cleared after the thruster core
    temperature is lower than this limit and temperature regulation resumes as normal.
"""
data_type = "float"
units = "degrees Celsius"
valid_range = "[-30.0, 1200.0]"
active = true


[[saps]]
sap_key = "prop.core.highTempAbortLimit.bakeout"
device_ref = "0x0414"
desc = """ Thruster core abort temperature limit for the prop FSW modes bakeout and telem

    If the prop.core.thrusterTemp telemetry point is above this limit, the propulsion device
    transitions prop.system.mode to Abort, preventing further temperature regulation. The prop FSW
    transitions prop.fsw.state Idle. The prop.system.abortCode and prop.fsw.abortCode telemetry
    points are set appropriately in this condition.
"""
data_type = "float"
units = "degrees Celsius"
valid_range = "[-30.0, 1200.0]"
active = true

[[saps]]
sap_key = "prop.core.highTempAbortLimit.thrust"
device_ref = "0x0414"
desc = """ Thruster core abort temperature limit for the prop FSW mode thrust

    If the prop.core.thrusterTemp telemetry point is above this limit, the propulsion device will
    transition prop.system.mode to Abort, preventing further temperature regulation and thrusting.
    The prop FSW transitions prop.fsw.state Idle. The prop.system.abortCode and prop.fsw.abortCode
    telemetry points are set appropriately in this condition.
"""
data_type = "float"
units = "degrees Celsius"
valid_range = "[-30.0, 1200.0]"
active = true

[[saps]]
sap_key = "prop.core.highRegulatorTempAbortLimit"
device_ref = "0x0418"
desc = """ Thruster core temperature regulator abort temperature limit

    If the prop.core.regulatorTemp telemetry point is above this limit, the propulsion device
    transitions prop.system.mode to Abort, preventing further temperature regulation and thrusting.
    The prop FSW transitions prop.fsw.state to Idle. The prop.system.abortCode and
    prop.fsw.abortCode telemetry points are set appropriately in this condition.
"""
data_type = "float"
units = "degrees Celsius"
valid_range = "[-30.0, 80.0]"
active = true

[[saps]]
sap_key = "prop.core.thermostatProportionalGain"
device_ref = "0x041c"
desc = """ Thermostat proportional gain.

    Undocumented by Bradford. Part of the thruster core PID temperature control loop.
"""
data_type = "float"
units = "volts / degrees Celsius"
valid_range = "[0.0, 1.0]"
active = true

[[saps]]
sap_key = "prop.core.thermostatIntegralGain"
device_ref = "0x0420"
desc = """ Thermostat integral gain.

    Undocumented by Bradford. Part of the thruster core PID temperature control loop.
"""
data_type = "float"
units = "volts / seconds / degrees Celsius"
valid_range = "[0.0, 0.5]"
active = true

[[saps]]
sap_key = "prop.core.thermostatDerivativeGain"
device_ref = "0x0424"
desc = """ Thermostat derivative gain.

    Undocumented by Bradford. Part of the thruster core PID temperature control loop.
"""
data_type = "float"
units = "volts * seconds / degrees Celsius"
valid_range = "[0.0, 8.0]"
active = true

[[saps]]
sap_key = "prop.core.thermostatDerivativeGainInputFiltering"
device_ref = "0x0428"
desc = """ Derivative gain input filtering.

    Undocumented by Bradford. Part of the thruster core PID temperature control loop.
"""
data_type = "float"
units = "1 / seconds"
valid_range = "[0.0, 0.40]"
active = true

[[saps]]
sap_key = "prop.core.thermostatIntegralGainWindupLimit.bakeout"
device_ref = "0x042c"
desc = """ Integral gain windup limit for the prop FSW modes bakeout and telem

    Undocumented by Bradford. Part of the thruster core PID temperature control loop.
"""
data_type = "float"
units = "volts"
valid_range = "[0.0, 8.0]"
active = true

[[saps]]
sap_key = "prop.core.thermostatIntegralGainWindupLimit.thrust"
device_ref = "0x042c"
desc = """ Integral gain windup limit for the prop FSW modes thrust

    Undocumented by Bradford. Part of the thruster core PID temperature control loop.
"""
data_type = "float"
units = "volts"
valid_range = "[0.0, 34.0]"
active = true

[[saps]]
sap_key = "prop.core.thrusterTemp.setPoint.thrusting"
device_ref = "0x0430"
desc = """ Thruster core thrusting temperature set point during thrust

    The thermostat will control the thruster core superheater (prop.core.thrusterTemp) to this
    temperature when the prop.fsw.mode is Thrust and the prop.fsw.state is Thrusting.
"""
data_type = "float"
units = "degrees Celsius"
valid_range = "[-30.0, 1250.0]"
active = true

[[saps]]
sap_key = "prop.core.thrusterTemp.setPoint.heatingThruster"
device_ref = "0x0434"
desc = """ Thruster core preheat temperature set point during thruster core pre-heat

    The thermostat will control the thruster core superheater (prop.core.thrusterTemp) to this
    temperature when the prop.fsw.mode is Thrust prop.fsw.state is HeatingThruster.
"""
data_type = "float"
units = "degrees Celsius"
valid_range = "[-30.0, 1250.0]"
active = true

[[saps]]
sap_key = "prop.core.thrusterTemp.setPoint.bakeout"
device_ref = "0x0438"
desc = """ Thruster core superheater preheat temperature set point during bakeout

    The thermostat will control the thruster core superheater (prop.core.thrusterTemp) to this
    temperature when the prop.fsw.mode is Bakeout and prop.fsw.state is HeatingThruster or
    BakingOut.
"""
data_type = "float"
units = "degrees Celsius"
valid_range = "[-30.0, 1250.0]"
active = true

[[saps]]
sap_key = "prop.core.powerIntegralGain"
device_ref = "0x043c"
desc = "Power controller integral gain. Undocumented by Bradford."
data_type = "float"
units = "Q * seconds / volt"
valid_range = "[0.0002, 40]"
active = true

[[saps]]
sap_key = "prop.core.powerOutputLimit.bakeout"
device_ref = "0x0440"
desc = """ Power controller integral gain for the FSW modes bakeout and telem.

    This is a hard limit on the power controller output; regardless of thermostat settings, the
    thruster core superheater supply will not be set above this value. This may be used to clip
    current transients.
"""
data_type = "uint16"
units = "Q"
valid_range = "[0, 65535]"
active = true

[[saps]]
sap_key = "prop.core.powerOutputLimit.thrust"
device_ref = "0x0440"
desc = """ Power controller integral gain for the FSW mode thrust.

    This is a hard limit on the power controller output; regardless of thermostat settings, the
    thruster core superheater supply will not be set above this value. This may be used to clip
    current transients.
"""
data_type = "uint16"
units = "Q"
valid_range = "[0, 65535]"
active = true

[[saps]]
sap_key = "prop.tank.tempLimit"
device_ref = "0x0442"
desc = """ Propellant tank pressure controller temperature limit

    If either tank temperature (telemetry points prop.tank.tempA or prop.tank.tempB) is above this
    limit the body heaters will not be actuated.
"""
data_type = "float"
units = "degrees Celsius"
# Range justification: This is a value I derived, not a value provided anywhere by Bradford.  This
# is based on the performance curve provided by Brandford for the system in the MRR+ charts which
# gives data up to 45C. LeoStella added margin by backing the pressure off a little from the value
# that corresponds to 45C because of the sawtooth behavior in the temperature which may cause an
# abort if the pressure corresponds exactly to the Tank pressure controller temperature limit.
valid_range = "[25.0, 55.0]"
active = true

[[saps]]
sap_key = "prop.tank.pressure.setPoint"
device_ref = "0x044a"
desc = """Propellant tank pressure controller set point

    Determines the desired value of the prop.tank.pressure telemetry point. These heaters are
    disabled during thrusting (i.e. when prop.fsw.state is Thrusting).

    In conjunction with the prop.tank.pressure.hysteresis, this forms the basis of the bang-bang
    heating control algorithm for the propellant tanks.
"""
data_type = "float"
units = "psia"
# Range justification: Derived by LeoStella. This is based on the performance curve Bradford
# provided for the system in the MRR+ charts which gives data up to 45C. Margin is added to the
# pressure of the value that corresponds to 45C because of the sawtooth behavior in the temperature
# which may cause an abort if the pressure corresponds exactly to the Tank pressure controller
# temperature limit
valid_range = "[0.0, 70.0]"
active = true

[[saps]]
sap_key = "prop.tank.pressure.hysteresis"
device_ref = "0x044e"
desc = """Propellant tank pressure controller hysteresis

    The bang-bang algorithm will regulate the prop.tank.pressure telemetry point to the
    prop.tank.pressure.setPoint SAP, plus or minus this hysteresis SAP.
"""
data_type = "float"
units = "psia"
valid_range = "[0.01, 10.0]"
active = true

[[saps]]
sap_key = "prop.thrust.coefficient1"
device_ref = "0x0610"
desc = "Determines the slope of the prop.thrust.level telemetry point"
data_type = "float"
units = "newtons/psia"
valid_range = "[-1.0, 1.0]"
active = true

[[saps]]
sap_key = "prop.thrust.coefficient2"
device_ref = "0x0610"
desc = "Determines the offset of the prop.thrust.level telemetry point"
data_type = "float"
units = "newtons"
valid_range = "[-100.0, 100.0]"
active = true

[[saps]]
sap_key = "prop.thrust.maxImpulse"
device_ref = "0x061c"
desc = """ Single thrust maneuvers above this impulse are not allowed.
    See the prop.thrust.impulse telemetry point.
"""
data_type = "float"
units = "newton-seconds"
valid_range = "[0.05, 15.0]"
active = true

[[saps]]
sap_key = "prop.thrust.maxDuration"
device_ref = "0x0624"
data_type = "float"
desc = """ Single thrust maneuvers longer than this duration are not allowed.
    See the thrust_duration_s argument of the prop_thrust command.
"""
units = "seconds"
valid_range = "[1, 900]"
active = true

[[saps]]
sap_key = "prop.external.tank.heater.survivalTemp.enable"
desc = """ If enabled, command the PCU to monitor tank temperature and keep the temperature around
           the set point (prop.external.tank.heater.survivalTemp.setPoint)"""
data_type = "boolean"
valid_range = ""
sap_family = "prop.external.tank.heater.survivalTemp"
active = true

[[saps]]
sap_key = "prop.external.tank.heater.survivalTemp.hysteresis"
desc = """ Hysteresis value of the tank heater when the eps-service heater mode is TankSurvival. The bang-bang controller will enable heating when less than the set point minus this value, and disable heating when more than the set point plus this value.
           Required by SCOUT_B2E_1-FSW_STY-332.
           See telemetry toml: eps.pcu.batteryVoltage for unit conversion"""
data_type = "uint16"
units = "tenths of a degree Celsius"
valid_range = "[1, 50]"
sap_family = "prop.external.tank.heater.survivalTemp"
active = true

[[saps]]
sap_key = "prop.external.tank.heater.survivalTemp.setPoint"
desc = """ When the prop-service is in Idle Mode, it will command the eps-service tank heater mode
           to TankSurvival. The eps-service will in turn regulate the tank heat to this set point.
           Required by SCOUT_B2E_1-FSW_STY-332."""
data_type = "int16"
units = "tenths of a degree Celsius"
valid_range = "[50, 400]"
sap_family = "prop.external.tank.heater.survivalTemp"
active = true

[[saps]]
sap_key = "prop.tcbm.enable"
desc = """ Enable Thermocouple Bypass Mode (TCBM)

           In the event that a Comet-8000 unit's thermocouple fails, the Thermocouple Bypass Mode may be
           enabled so that the thermocouple's temperature readings are ignored, and the superheater voltage
           has an open-loop control cycle. When this is enabled, the delay and voltage SAPs must be set
           according to the individual Comet-8000 unit's EIDP."""
data_type = "boolean"
valid_range = ""
active = true

[[saps]]
sap_key = "prop.tcbm.preheat.delay.intermediate"
desc = """ The time in seconds to wait after beginning preheat to transition to the intermediate superheater voltage when TCBM is enabled.

           The sum of this SAP and `prop.tcbm.preheat.delay.steady` is used to define a minimum preheat duration
           when TCBM is enabled. If a preheat duration shorter than this sum is passed to the `prop_thrust` command, the
           script will abort after init with an error message in the syslog."""
data_type = "int16"
units = "seconds"
valid_range = "[0, 300]"
sap_family = "prop.tcbm.preheat"
active = true

[[saps]]
sap_key = "prop.tcbm.preheat.delay.steady"
desc = """ The time in seconds to wait after the thruster preheat goes to the intermediate superheater voltage before
           setting the superheater voltage to the steady-state preheat setpoint when TCBM is enabled.

           The sum of this SAP and `prop.tcbm.preheat.delay.intermediate` is used to define a minimum preheat duration
           when TCBM is enabled. If a preheat duration shorter than this sum is passed to the `prop_thrust` command, the
           script will abort after init with an error message in the syslog."""
data_type = "int16"
units = "seconds"
valid_range = "[0, 1200]"
sap_family = "prop.tcbm.preheat"
active = true

[[saps]]
sap_key = "prop.tcbm.thrust.delay.steady"
desc = """ The time in seconds to wait after thrust begins before setting the superheater voltage to the steady-state thrust setpoint when TCBM is enabled. """
data_type = "int16"
units = "seconds"
valid_range = "[0, 300]"
sap_family = "prop.tcbm.thrust"
active = true

[[saps]]
sap_key = "prop.tcbm.preheat.volt.initial"
desc = """ The voltage to set the superheater to at the beginning of open-loop preheat when TCBM is enabled. """
data_type = "float"
units = "volts"
valid_range = "[0.0, 34.0]"
sap_family = "prop.tcbm.preheat"
active = true

[[saps]]
sap_key = "prop.tcbm.preheat.volt.intermediate"
desc = """ The voltage to set the superheater to during the intermediate phase of open-loop preheat when TCBM is enabled. """
data_type = "float"
units = "volts"
valid_range = "[0.0, 34.0]"
sap_family = "prop.tcbm.preheat"
active = true

[[saps]]
sap_key = "prop.tcbm.preheat.volt.steady"
desc = """ The voltage to set the superheater to during the steady-state phase of open-loop preheat when TCBM is enabled. """
data_type = "float"
units = "volts"
valid_range = "[0.0, 34.0]"
sap_family = "prop.tcbm.preheat"
active = true

[[saps]]
sap_key = "prop.tcbm.thrust.volt.initial"
desc = """ The voltage to set the superheater to at the beginning of open-loop thrust when TCBM is enabled. """
data_type = "float"
units = "volts"
valid_range = "[0.0, 34.0]"
sap_family = "prop.tcbm.thrust"
active = true

[[saps]]
sap_key = "prop.tcbm.thrust.volt.steady"
desc = """ The voltage to set the superheater to during the steady-state phase of open-loop thrust when TCBM is enabled. """
data_type = "float"
units = "volts"
valid_range = "[0.0, 34.0]"
sap_family = "prop.tcbm.thrust"
active = true


[[saps]]
sap_key = "eps.pcu.batteryHarnessResistance"
desc = """  Battery voltage reading correction based on how much current is running through the harness.

            The harness has sense lines, but they only go to the bulkhead, so the rest of the resistance must be
            taken into account for.

            See FSW-3202.
"""
data_type = "uint16"
active = true
units = "milliohms"
valid_range = "[0, 4095]"

[[saps]]
sap_key = "eps.pcu.batteryVoltage.setPoint"
desc = """  Battery voltage set point.

            Voltage level that the battery charging algorithm attempts to regulate the battery voltage to by switching
            solar array strings on and off.

            Required by SCOUT_BLOCK2-FSW_STY-331.

            See telemetry toml: eps.pcu.batteryVoltage for unit conversion."""
data_type = "uint16"
active = true
units = "ADC count"
valid_range = "[2948, 3342]"  # Approx [30V, 34V]

[[saps]]
sap_key = "eps.pcu.batteryHysteresisCritical"
desc = """  Battery voltage monitoring critical detection hysteresis.

            Number of times in a row that the battery voltage and temperature must read outside of threshold values
            before declaring a critical condition and preventing the battery from charging."""
data_type = "uint32"
active = true
units = "counts"
valid_range = "[1, 99]"

[[saps]]
sap_key = "eps.pcu.batteryHysteresisNominal"
desc = """  Battery voltage monitoring nominal detection hysteresis.

            Number of times in a row that the battery voltage and temperature must read within threshold values before
            allowing the battery to charge."""
data_type = "uint32"
active = true
units = "counts"
valid_range = "[1, 99]"

[[saps]]
sap_key = "eps.pcu.batteryVoltage.low"
desc = """  Battery under-voltage detection set point.

            If the battery voltage telemetry point, eps.pcu.batteryVoltage, reads below this level more than
            eps.pcu.batteryHysteresisCritical samples in a row, flight software will force battery charging by forcing
            all solar array switches closed and then transition into SAFE mode. If the spacecraft is already in SAFE
            mode then the alarm forcing this will not be set unless the eps.pcu.batteryVoltage.alarmInSafeEnable
            SAP is TRUE. If that flag is FALSE and the spacecraft is in SAFE mode then there will be no alarm.

            NOTE: This SAP is specifically NOT associated with the eps.pcu.batteryVoltageRaw telemetry point.

            Required by SCOUT_BLOCK2-FSW_STY-324

            See telemetry toml: eps.pcu.batteryVoltage for unit conversion."""
data_type = "uint16"
units = "ADC count"
valid_range = "[2850, 3047]"  # Approx [29V, 31V]
sap_family = "eps.pcu.batteryVoltage"
active = true

[[saps]]
sap_key = "eps.pcu.batteryVoltage.high"
desc = """  Battery over-voltage detection set point.

            If the battery reads above this level more than eps.pcu.batteryHysteresisCritical samples in a row, flight
            software will inhibit battery charging by forcing all solar array switches open. It will NOT transition to
            SAFE mode.

            Required by SCOUT_BLOCK2-FSW_STY-323

            See telemetry toml: eps.pcu.batteryVoltage for unit conversion."""
data_type = "uint16"
units = "ADC count"
valid_range = "[3047, 3342]"  # Approx [31V, 34V]
sap_family = "eps.pcu.batteryVoltage"
active = true

[[saps]]
sap_key = "eps.pcu.batteryVoltage.low.enable"
desc = """  Battery under-voltage detection set point enable.

            When true (1), enables the eps.pcu.batteryVoltage.low SAP."""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryVoltage"
active = true

[[saps]]
sap_key = "eps.pcu.batteryVoltage.high.enable"
desc = """  Battery over-voltage detection set point enable.

            When true (1), enables the eps.pcu.batteryVoltage.high SAP."""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryVoltage"
active = true

[[saps]]
sap_key = "eps.pcu.batteryVoltage.alarmInSafeEnable"
desc = """  Enable alarm in safe mode when battery voltage is under threshhold.

            When true (1), enables the alarm in safe mode"""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryVoltage"
active = true

[[saps]]
sap_key = "eps.pcu.loadCurrent.low"
desc = """  Low side current limit for spacecraft monitoring.

            See eps.pcu.loadCurrent in telemetry toml for unit conversion"""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.loadCurrent"
active = false

[[saps]]
sap_key = "eps.pcu.loadCurrent.high"
desc = """  High side current limit for spacecraft monitoring.

            See eps.pcu.loadCurrent in telemetry toml for unit conversion"""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.loadCurrent"
active = false

[[saps]]
sap_key = "eps.pcu.loadCurrent.low.enable"
desc = """  Low side current limit for spacecraft monitoring enable.

            When true (1), enables the eps.pcu.loadCurrent.low SAP."""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.loadCurrent"
active = false

[[saps]]
sap_key = "eps.pcu.loadCurrent.high.enable"
desc = """  High side current limit for spacecraft monitoring enable.

            When true (1), enables the eps.pcu.loadCurrent.high.enable SAP."""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.loadCurrent"
active = false

[[saps]]
sap_key = "eps.pcu.eolRelayState.safe"
desc = """  End-of-Life (EOL) Relay State when S/C is in SAFE mode.

            When the eps-service starts and the S/C is in SAFE mode, it will automatically set the EOL
            Relay to this value.

            The eps-service will also send the command to the PCU once upon update of this SAP if the S/C
            is in SAFE mode at the time of update.

            When CLOSED, the EOL Relay connects the Solar Array 1 input directly to the battery.
            This allows the satellite to attempt to charge the battery even under the condition
            that the PCU is no longer able to power itself and control the solar array switches.
            This is the nominal state.

            When OPEN, the EOL Relay severs that direct connection. This allows for electrical
            passivation of the PCU. Setting this SAP to OPEN should only be done as part of the
            decommissioning of the satellite. """
data_type = "string"
valid_range = "CLOSED, OPEN"
sap_family = "eps.pcu.eolRelay"
units = ""
active = true

[[saps]]
sap_key = "eps.pcu.eolRelayState.nominal"
desc = """  End-of-Life (EOL) Relay State when S/C is in any mode other than SAFE mode.

            When the eps-service starts and the S/C is in a nominal mode (not SAFE mode), it will
            automatically set the EOL Relay to this value.

            In addition, when the S/C mode goes from SAFE to STANDBY, the eps-service will automatically
            set the EOL relay state to this value.

            The eps-service will also send the command to the PCU once upon update of this SAP if the S/C
            is in a nominal mode at the time of update.

            When CLOSED, the EOL Relay connects the Solar Array 1 input directly to the battery.
            This allows the satellite to attempt to charge the battery even under the condition
            that the PCU is no longer able to power itself and control the solar array switches.
            This is the nominal state.

            When OPEN, the EOL Relay severs that direct connection. This allows for electrical
            passivation of the PCU. Setting this SAP to OPEN should only be done as part of the
            decommissioning of the satellite. """
data_type = "string"
valid_range = "CLOSED, OPEN"
sap_family = "eps.pcu.eolRelay"
units = ""
active = true

[[saps]]
sap_key = "eps.pcu.eolRelayState.batteryVoltage.high"
desc = """  Open the EOL relay when the battery voltage is higher than this value.

            Opening the EOL relay at a certain battery voltage threshold helps to ensure that the battery does not
            over-charge if the downstream loads (eps.pcu.loadCurrent telemetry) are not drawing more current than solar
            array #1.

            This value should be set as close to the maximum recommended charge voltage of 33.6 V as possible without
            allowing the battery to charge beyond that. Test data shows that closing solar array switches may cause a
            0.1 V jump. Therefore, with margin, the ideal value for this SAP is 33.3 V.

            This SAP will override the eps.pcu.eolRelayState.safe and eol.pcu.eolRelayState.nominal when these SAPs are
            set to CLOSED.

            Setting this SAP to the maximum value effectively disables this feature. Ideally, this should be set to
            open the EOL relay just below the eps.pcu.batteryVoltage.high SAP.

            See telemetry toml: eps.pcu.batteryVoltage for unit conversion."""
data_type = "uint16"
valid_range = "[2949, 4095]"  # Approx [30V, 41.7V]
sap_family = "eps.pcu.eolRelay"
units = "ADC count"
active = true

[[saps]]
sap_key = "eps.pcu.eolRelayState.batteryVoltage.low"
desc = """  Close the EOL relay when the battery voltage is lower than this value and eps.pcu.eolRelayState SAPs allow.

            This SAP determins what battery voltage level to close the SAP at after being opened due to the
            eps.pcu.eolRelayState.batteryVoltage.high SAP.

            The eps-service will still respect eps.pcu.eolRelayState.safe and eol.pcu.eolRelayState.nominal. So it will
            not close the EOL relay if the SAP associated with the current S/C Mode is set to OPEN. Ideally, this
            should be set to close the EOL relay at about 0.5 V below eps.pcu.eolRelayState.batteryVoltage.high to
            prevent exsessive EOL relay switching.

            If this value is larger than eps.pcu.eolRelayState.batteryVoltage.high, then the realy will not be open due
            to high voltage.

            See telemetry toml: eps.pcu.batteryVoltage for unit conversion."""
data_type = "uint16"
valid_range = "[2949, 4095]"  # Approx [30.0V, 41.7V]
sap_family = "eps.pcu.eolRelay"
units = "ADC count"
active = true

[[saps]]
sap_key = "eps.pcu.solarArrayCurrentEstimateCalibration.gain"
desc = """  Calibration values for estimating Solar Array 1 current when EOL Relay is CLOSED

            This SAP, along with eps.pcu.solarArrayCurrentEstimateCalibration.offset, allows for
            calibrating the conversion between the course sun sensor data and the estimated current
            through Solar Array 1.

            When the EOL relay is CLOSED, it bypasses the Solar Array 1 switch and is instead
            directly connected to the battery. For legacy reasons, this has the side-effect of
            bypassing the solar array current sensor. Instead, FSW estimates the current through
            Solar Array 1 based on the value of the +Y Course Sun Sensor (see adcs.meas.css2Volt
            telemetry).
            """
data_type = "float"
valid_range = "[0.0, 1.0]"
sap_family = "eps.pcu.eolRelay"
units = "Amps/Volts"
active = true

[[saps]]
sap_key = "eps.pcu.solarArrayCurrentEstimateCalibration.offset"
desc = """  Calibration values for estimating Solar Array 1 current when EOL Relay is CLOSED

            This SAP, along with eps.pcu.solarArrayCurrentEstimateCalibration.gain, allows for
            calibrating the conversion between the course sun sensor data and the estimated current
            through Solar Array 1.

            See eps.pcu.solarArrayCurrentEstimateCalibration.gain for details."""
data_type = "float"
valid_range = "[-0.5, 0.5]"
sap_family = "eps.pcu.eolRelay"
units = "Amps"
active = true

[[saps]]
sap_key = "eps.pcu.solarPanel1Temp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.solarPanel1Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel1Temp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.solarPanel1Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel1Temp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.solarPanel1Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel1Temp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.solarPanel1Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel2Temp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.solarPanel2Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel2Temp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.solarPanel2Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel2Temp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.solarPanel2Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel2Temp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.solarPanel2Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel3Temp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.solarPanel3Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel3Temp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.solarPanel3Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel3Temp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.solarPanel3Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel3Temp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.solarPanel3Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel4Temp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.solarPanel4Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel4Temp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.solarPanel4Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel4Temp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.solarPanel4Temp"
active = false

[[saps]]
sap_key = "eps.pcu.solarPanel4Temp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.solarPanel4Temp"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp1.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp1"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp1.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp1"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp1.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp1"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp1.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp1"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp2.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp2"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp2.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp2"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp2.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp2"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp2.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp2"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp3.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp3"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp3.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp3"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp3.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp3"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp3.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp3"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp4.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp4"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp4.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp4"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp4.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp4"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp4.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp4"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp5.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp5"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp5.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp5"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp5.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp5"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp5.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp5"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp6.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp6"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp6.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp6"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp6.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp6"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp6.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp6"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp7.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp7"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp7.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp7"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp7.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp7"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp7.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp7"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp8.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp8"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp8.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp8"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp8.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp8"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp8.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp8"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp9.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp9"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp9.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.structTemp9"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp9.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp9"
active = false

[[saps]]
sap_key = "eps.pcu.structTemp9.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.structTemp9"
active = false

[[saps]]
sap_key = "eps.pcu.batteryATemp1.regulate.low"
desc = """  Battery A Temperature Sensor 1 lower bound (not Safe mode).

            When not in Safe Mode, if battery A temperature telemetry reads above this resistance meaning temperature
            is below threshold, then the heater for battery A will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp1.regulate.high"

desc = """  Battery A Temperature Sensor 1 upper bound (not Safe mode).

            When not in Safe Mode, if battery A temperature telemetry reads below this resistance meaning temperature
            is above threshold, then the heater for battery A will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp1.regulate.safemode.low"
desc = """  Battery A Temperature Sensor 1 lower bound (Safe mode).

            When in Safe Mode, if battery A temperature telemetry reads above this resistance meaning temperature is
            below threshold, then the heater for battery A will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp1.regulate.safemode.high"
desc = """  Battery A Temperature Sensor 1 upper bound (Safe mode).

            When in Safe Mode, if battery A temperature telemetry reads below this resistance meaning temperature is
            above threshold, then the heater for battery A will be disabled."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp1.chargeFault"
desc = """  Maximum temperature at this sensor to charge battery.

            If this sensor reads below this resistance, meaning temperature is above threshold, more than
            eps.pcu.batteryHysteresisCritical samples in a row, flight software will inhibit battery charging by
            forcing all solar array switches open.

            Exception: eps.pcu.batteryVoltage.low takes priority over this SAP.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp1.regulate.enable"
desc = """  Enable sensor for temperature regulation.

            If enabled (1), flight software will use this sensor as input to regulate the temperature of battery A
            within the thresholds."""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryATemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp1.chargeFault.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryATemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp2.regulate.low"
desc = """  Battery A Temperature Sensor 2 lower bound (not Safe mode).

            When not in Safe Mode, if battery A temperature telemetry reads above this resistance meaning temperature
            is below threshold, then the heater for battery A will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp2.regulate.high"
desc = """  Battery A Temperature Sensor 2 upper bound (not Safe mode).

            When not in Safe Mode, if battery A temperature telemetry reads below this resistance meaning temperature
            is above threshold, then the heater for battery A will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp2.regulate.safemode.low"
desc = """  Battery A Temperature Sensor 2 lower bound (Safe mode).

            When in Safe Mode, if battery A temperature telemetry reads above this resistance meaning temperature is
            below threshold, then the heater for battery A will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp2.regulate.safemode.high"
desc = """  Battery A Temperature Sensor 2 upper bound (Safe mode).

            When in Safe Mode, if battery A temperature telemetry reads below this resistance meaning temperature is
            above threshold, then the heater for battery A will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp2.chargeFault"
desc = """  Maximum temperature at this sensor to charge battery.

            If this sensor reads below this resistance, meaning temperature is above threshold, more than
            eps.pcu.batteryHysteresisCritical samples in a row, flight software will inhibit battery charging by
            forcing all solar array switches open.

            Exception: eps.pcu.batteryVoltage.low takes priority over this SAP.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp2.regulate.enable"
desc = """  Enable sensor for temperature regulation.

            If enabled (1), flight software will use this sensor as input to regulate the temperature of battery A
            within the thresholds."""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryATemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp2.chargeFault.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryATemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp3.regulate.low"
desc = """  Battery A Temperature Sensor 3 lower bound (not Safe mode).

            When not in Safe Mode, if battery A temperature telemetry reads above this resistance meaning temperature
            is below threshold, then the heater for battery A will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp3.regulate.high"
desc = """  Battery A Temperature Sensor 3 upper bound (not Safe mode).

            When not in Safe Mode, if battery A temperature telemetry reads below this resistance meaning temperature
            is above threshold, then the heater for battery A will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp3.regulate.safemode.low"
desc = """  Battery A Temperature Sensor 3 lower bound (Safe mode).

            When in Safe Mode, if battery A temperature telemetry reads above this resistance meaning temperature is
            below threshold, then the heater for battery A will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp3.regulate.safemode.high"
desc = """  Battery A Temperature Sensor 3 upper bound (Safe mode).

            When in Safe Mode, if battery A temperature telemetry reads below this resistance meaning temperature is
            above threshold, then the heater for battery A will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp3.chargeFault"
desc = """  Maximum temperature at this sensor to charge battery.

            If this sensor reads below this resistance, meaning temperature is above threshold,
            more than eps.pcu.batteryHysteresisCritical samples in a row, flight software will
            inhibit battery charging by forcing all solar array switches open.

            Exception: eps.pcu.batteryVoltage.low takes priority over this SAP.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryATemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp3.regulate.enable"
desc = """  Enable sensor for temperature regulation.

            If enabled (1), flight software will use this sensor as input to regulate the temperature of battery A
            within the thresholds."""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryATemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryATemp3.chargeFault.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryATemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp1.regulate.low"
desc = """  Battery B Temperature Sensor 1 lower bound (not Safe mode).

            When not in Safe Mode, if battery B temperature telemetry reads above this resistance meaning temperature
            is below threshold, then the heater for battery B will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp1.regulate.high"
desc = """  Battery B Temperature Sensor 1 upper bound (not Safe mode).

            When not in Safe Mode, if battery B temperature telemetry reads below this resistance meaning temperature
            is above threshold, then the heater for battery B will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp1.regulate.safemode.low"
desc = """  Battery B Temperature Sensor 1 lower bound (Safe mode).

            When in Safe Mode, if battery B temperature telemetry reads above this resistance meaning temperature is
            below threshold, then the heater for battery B will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp1.regulate.safemode.high"
desc = """  Battery B Temperature Sensor 1 upper bound (Safe mode).

            When in Safe Mode, if battery B temperature telemetry reads below this resistance meaning temperature is
            above threshold, then the heater for battery B will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp1.chargeFault"
desc = """  Maximum temperature at this sensor to charge battery.

            If this sensor reads below this resistance, meaning temperature is above threshold, more than
            eps.pcu.batteryHysteresisCritical samples in a row, flight software will inhibit battery charging by
            forcing all solar array switches open.

            Exception: eps.pcu.batteryVoltage.low takes priority over this SAP.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp1.regulate.enable"
desc = """  Enable sensor for temperature regulation.

            If enabled (1), flight software will use this sensor as input to regulate the temperature of battery B
            within the thresholds."""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryBTemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp1.chargeFault.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryBTemp1"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp2.regulate.low"
desc = """  Battery B Temperature Sensor 2 lower bound (not Safe mode).

            When not in Safe Mode, if battery B temperature telemetry reads above this resistance meaning temperature
            is below threshold, then the heater for battery B will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp2.regulate.high"
desc = """  Battery B Temperature Sensor 2 upper bound (not Safe mode).

            When not in Safe Mode, if battery B temperature telemetry reads below this resistance meaning temperature
            is above threshold, then the heater for battery B will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp2.regulate.safemode.low"
desc = """  Battery B Temperature Sensor 2 lower bound (Safe mode).

            When in Safe Mode, if battery B temperature telemetry reads above this resistance meaning temperature is
            below threshold, then the heater for battery B will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp2.regulate.safemode.high"
desc = """  Battery B Temperature Sensor 2 upper bound (Safe mode).

            When in Safe Mode, if battery B temperature telemetry reads below this resistance meaning temperature is
            above threshold, then the heater for battery B will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp2.chargeFault"
desc = """  Maximum temperature at this sensor to charge battery.

            If this sensor reads below this resistance, meaning temperature is above threshold, more than
            eps.pcu.batteryHysteresisCritical samples in a row, flight software will inhibit battery charging by
            forcing all solar array switches open.

            Exception: eps.pcu.batteryVoltage.low takes priority over this SAP.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp2.regulate.enable"
desc = """  Enable sensor for temperature regulation.

            If enabled (1), flight software will use this sensor as input to regulate the temperature of battery B
            within the thresholds."""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryBTemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp2.chargeFault.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryBTemp2"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp3.regulate.low"
desc = """  Battery B Temperature Sensor 3 lower bound (not Safe mode).

            When not in Safe Mode, if battery B temperature telemetry reads above this resistance meaning temperature
            is below threshold, then the heater for battery B will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp3.regulate.high"
desc = """  Battery B Temperature Sensor 3 upper bound (not Safe mode).

            When not in Safe Mode, if battery B temperature telemetry reads below this resistance meaning temperature
            is above threshold, then the heater for battery B will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp3.regulate.safemode.low"
desc = """  Battery B Temperature Sensor 3 lower bound (Safe mode).

            When in Safe Mode, if battery B temperature telemetry reads above this resistance
            meaning temperature is below threshold, then the heater for battery B will be enabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp3.regulate.safemode.high"
desc = """  Battery B Temperature Sensor 3 upper bound (Safe mode).

            When in Safe Mode, if battery B temperature telemetry reads below this resistance meaning temperature is
            above threshold, then the heater for battery B will be disabled.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp3.chargeFault"
desc = """  Maximum temperature at this sensor to charge battery.

            If this sensor reads below this resistance, meaning temperature is above threshold, more than
            eps.pcu.batteryHysteresisCritical samples in a row, flight software will inhibit battery charging by
            forcing all solar array switches open.

            Exception: eps.pcu.batteryVoltage.low takes priority over this SAP.

            NOTE: When updating this value, the conversion function on the associated temperature sensor telemetry
            point in the Telemetry TOML file may be referenced, but it is more accurate to use the lookup table in the
            'LS-100_PCUBatteryTempSensor_Conversion.xls' file included with the FSW release."""
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "eps.pcu.batteryBTemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp3.regulate.enable"
desc = """  Enable sensor for temperature regulation.

            If enabled (1), flight software will use this sensor as input to regulate the
            temperature of battery B within the thresholds."""
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryBTemp3"
active = true

[[saps]]
sap_key = "eps.pcu.batteryBTemp3.chargeFault.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "eps.pcu.batteryBTemp3"
active = true

[[saps]]
sap_key = "adcs.MeasHealth.magTemp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.magTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.magTemp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.magTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.magTemp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.magTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.magTemp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.magTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.magVoltage.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "float"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.magVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.magVoltage.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "float"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.magVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.magVoltage.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.magVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.magVoltage.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.magVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gyroTemp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.gyroTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gyroTemp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.gyroTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gyroTemp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.gyroTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gyroTemp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.gyroTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.accelTemp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.accelTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.accelTemp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.accelTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.accelTemp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.accelTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.accelTemp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.accelTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Current.low"
desc = "Low side current limit for spacecraft monitoring"
data_type = "float"
units = "Amps"
valid_range = "[0, 1]"
sap_family = "adcs.MeasHealth.str1Current"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Current.high"
desc = "High side current limit for spacecraft monitoring"
data_type = "float"
units = "Amps"
valid_range = "[0, 1]"
sap_family = "adcs.MeasHealth.str1Current"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Current.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str1Current"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Current.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str1Current"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Voltage.low"
desc = "Low side voltage limit for spacecraft monitoring"
data_type = "float"
units = "Volts"
valid_range = "[0, 5]"
sap_family = "adcs.MeasHealth.str1Voltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Voltage.high"
desc = "High side voltage limit for spacecraft monitoring"
data_type = "float"
units = "Volts"
valid_range = "[0, 5]"
sap_family = "adcs.MeasHealth.str1Voltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Voltage.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str1Voltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Voltage.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str1Voltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Temp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int16"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.str1Temp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Temp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int16"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.str1Temp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Temp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str1Temp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str1Temp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str1Temp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Current.low"
desc = "Low side current limit for spacecraft monitoring"
data_type = "float"
units = "Amps"
valid_range = "[0, 1]"
sap_family = "adcs.MeasHealth.str2Current"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Current.high"
desc = "High side current limit for spacecraft monitoring"
data_type = "float"
units = "Amps"
valid_range = "[0, 1]"
sap_family = "adcs.MeasHealth.str2Current"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Current.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str2Current"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Current.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str2Current"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Voltage.low"
desc = "Low side voltage limit for spacecraft monitoring"
data_type = "float"
units = "Volts"
valid_range = "[0, 5]"
sap_family = "adcs.MeasHealth.str2Voltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Voltage.high"
desc = "High side voltage limit for spacecraft monitoring"
data_type = "float"
units = "Volts"
valid_range = "[0, 5]"
sap_family = "adcs.MeasHealth.str2Voltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Voltage.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str2Voltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Voltage.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str2Voltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Temp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int16"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.str2Temp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Temp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int16"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.str2Temp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Temp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str2Temp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.str2Temp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.str2Temp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.fssTemp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.fssTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.fssTemp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.fssTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.fssTemp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.fssTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.fssTemp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.fssTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsBoardVoltage.low"
desc = "Low side voltage limit for spacecraft monitoring"
data_type = "float"
units = "Volts"
valid_range = "[10, 14]"
sap_family = "adcs.MeasHealth.gpsBoardVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsBoardVoltage.high"
desc = "High side voltage limit for spacecraft monitoring"
data_type = "float"
units = "Volts"
valid_range = "[10, 14]"
sap_family = "adcs.MeasHealth.gpsBoardVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsBoardVoltage.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.gpsBoardVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsBoardVoltage.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.gpsBoardVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsBoardTemp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int16"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.gpsBoardTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsBoardTemp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int16"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.gpsBoardTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsBoardTemp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.gpsBoardTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsBoardTemp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.gpsBoardTemp"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsAntVoltage.low"
desc = "Low side voltage limit for spacecraft monitoring"
data_type = "float"
units = "Volts"
valid_range = "[3, 8]"
sap_family = "adcs.MeasHealth.gpsAntVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsAntVoltage.high"
desc = "High side voltage limit for spacecraft monitoring"
data_type = "float"
units = "Volts"
valid_range = "[3, 8]"
sap_family = "adcs.MeasHealth.gpsAntVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsAntVoltage.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.gpsAntVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsAntVoltage.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.gpsAntVoltage"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsAntCurrent.low"
desc = "Low side current limit for spacecraft monitoring"
data_type = "float"
units = "Amps"
valid_range = "[0, 1]"
sap_family = "adcs.MeasHealth.gpsAntCurrent"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsAntCurrent.high"
desc = "High side current limit for spacecraft monitoring"
data_type = "float"
units = "Amps"
valid_range = "[0, 1]"
sap_family = "adcs.MeasHealth.gpsAntCurrent"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsAntCurrent.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.gpsAntCurrent"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.gpsAntCurrent.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.gpsAntCurrent"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.rwTemps.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.rwTemps"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.rwTemps.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int8"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "adcs.MeasHealth.rwTemps"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.rwTemps.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.rwTemps"
active = false

[[saps]]
sap_key = "adcs.MeasHealth.rwTemps.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "adcs.MeasHealth.rwTemps"
active = false

[[saps]]
sap_key = "payload.telescope.temp1.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "payload.telescope.temp1"
active = false

[[saps]]
sap_key = "payload.telescope.temp1.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "payload.telescope.temp1"
active = false

[[saps]]
sap_key = "payload.telescope.temp1.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.telescope.temp1"
active = false

[[saps]]
sap_key = "payload.telescope.temp1.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.telescope.temp1"
active = false

[[saps]]
sap_key = "payload.telescope.temp2.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "payload.telescope.temp2"
active = false

[[saps]]
sap_key = "payload.telescope.temp2.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "payload.telescope.temp2"
active = false

[[saps]]
sap_key = "payload.telescope.temp2.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.telescope.temp2"
active = false

[[saps]]
sap_key = "payload.telescope.temp2.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.telescope.temp2"
active = false

[[saps]]
sap_key = "payload.telescope.temp3.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "payload.telescope.temp3"
active = false

[[saps]]
sap_key = "payload.telescope.temp3.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "payload.telescope.temp3"
active = false

[[saps]]
sap_key = "payload.telescope.temp3.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.telescope.temp3"
active = false

[[saps]]
sap_key = "payload.telescope.temp3.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.telescope.temp3"
active = false

[[saps]]
sap_key = "payload.telescope.temp4.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "payload.telescope.temp4"
active = false

[[saps]]
sap_key = "payload.telescope.temp4.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "payload.telescope.temp4"
active = false

[[saps]]
sap_key = "payload.telescope.temp4.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.telescope.temp4"
active = false

[[saps]]
sap_key = "payload.telescope.temp4.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.telescope.temp4"
active = false

[[saps]]
sap_key = "payload.telescope.temp5.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "payload.telescope.temp5"
active = false

[[saps]]
sap_key = "payload.telescope.temp5.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "uint16"
units = "ADC count"
valid_range = "[0, 4095]"
sap_family = "payload.telescope.temp5"
active = false

[[saps]]
sap_key = "payload.telescope.temp5.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.telescope.temp5"
active = false

[[saps]]
sap_key = "payload.telescope.temp5.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.telescope.temp5"
active = false

[[saps]]
sap_key = "payload.camera.temp.low"
desc = "Low side temperature limit for spacecraft monitoring"
data_type = "int16"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "payload.camera.temp"
active = false

[[saps]]
sap_key = "payload.camera.temp.high"
desc = "High side temperature limit for spacecraft monitoring"
data_type = "int16"
units = "degrees Celsius"
valid_range = "[-128, 128]"
sap_family = "payload.camera.temp"
active = false

[[saps]]
sap_key = "payload.camera.temp.low.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.camera.temp"
active = false

[[saps]]
sap_key = "payload.camera.temp.high.enable"
desc = "If enabled, corresponding limits will be monitored on spacecraft"
data_type = "boolean"
valid_range = ""
sap_family = "payload.camera.temp"
active = false

[[saps]]
sap_key = "mrm.disable"
desc = """ When 1 (true), the mrm-service will skip MRM on init, or power it off if already init'd.
           When 0 (false), the mrm-service will init MRM device."""
active = false
data_type = "boolean"
valid_range = ""
units = ""

# DEV FAULT SAPS
# See: https://confluence.spaceflightindustries.com/display/SPP/Block+2+FSW+Arch%3A+9.+Service+Fault+Management#Block2FSWArch:9.ServiceFaultManagement-DeviceCommunicationFaultDetectionandCorrection
# LeoStella Reference: https://confluence.leostella.com/display/BLK2/Block+2+FSW+Arch%3A+9.+Service+Fault+Management#Block2FSWArch:9.ServiceFaultManagement-DeviceCommunicationFaultDetectionandCorrection
[[saps]]
sap_key = "mrm.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           This determines when a device needs to be power cycled. This represents the size of the boxcar
           filter window for collecting samples from the device service. At the end of this window, an error
           rate will be calculated and checked against the mrm.devfault.power.cycle.error.rate SAP."""
active = true
data_type = "uint32"
valid_range = "[2000000, 120000000]"
units = "microsec"

[[saps]]
sap_key = "mrm.devfault.power.cycle.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to power cycle the device."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "mrm.devfault.alarm.filter.window.multiplier"
desc = """ A multiplier for the filter.window.microsec SAP. Determines the size of the second layer filter window.
           The second layer determines when a device service should declare an Alarm. At the end of this window
           an error rate will be calculated and checked against the mrm.devfault.alarm.error.rate SAP."""
active = true
data_type = "uint8"
valid_range = "[1, 20]"
units = "x multiplier"

[[saps]]
sap_key = "mrm.devfault.alarm.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to declare an alarm state."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "mrm.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the mrm.devfault.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm. The device may continue to power cycle in this case."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "imu.disable"
desc = """ When 1 (true), the imu-service will skip IMU on init, or power it off if already init'd.
           When 0 (false), the imu-service will init IMU device."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "imu.powerOnDelayUs"
desc = """  Delay before turning on power.

            Applies to service start, IMU swap, and FDIR power-cycle.
       """
active = true
data_type = "uint32"
valid_range = "[200000, 60000000]"
units = "microsec"


[[saps]]
sap_key = "imu.init.retry.count"
desc = """ The number of IMU initialization failures before switching IMUs.

           This SAP value is compared to the count of consecutive initialization failures when responding to an
           initialization failure.

           Before the count hits this value, the active IMU will be reinitialized again. When this count is reached,
           the service will alternate active IMUs on each initialization attempt. The count is reset to zero when
           initialization is successful or imu-service is restarted.

           For example: When this SAP is set to zero the IMU will be swapped on every failed initialization attempt
           (traditional behavior). When this SAP is set to 10, the active IMU will be initialized 11 times before
           alternating IMUs on each subsequent initialization attempt.

           When this SAP is set to the same value as imu.init.fails.allowed.count, the service will fail over to the
           other IMU and alarm at the same time.

           Operators **MUST NOT** set this SAP to less than imu.init.fails.allowed.count, or the active IMU will not
           be switched before alarming, and subsequent boots may continue to use a failed IMU. The service will print
           a warning in this case.
           """
active = true
data_type = "uint8"
valid_range = "[0, 100]"
units = "count"

[[saps]]
sap_key = "imu.init.fails.allowed.count"
desc = """ The IMU may fail during its initialization phase, which is ok.
           This SAP controls how many consecutive failures we allow before alarming.
           """
active = true
data_type = "uint8"
valid_range = "[0, 100]"
units = "count"

[[saps]]
sap_key = "imu.faults.allowed.count"
desc = """  Number of faults after IMU initialization before alarming.

            For example, a value of 1 will allow imu-service to failover to the alternate IMU once without alarming,
            then raise an alarm on the next failover. A value of zero will cause the IMU to raise an Alarm on every
            failover.

            The failover counter is internal to imu-service. It is reset when imu-service restarts, or after a period
            of time set by imu.faults.clear.minutes.

            This SAP has no effect when alarms are disabled using imu.devfault.alarm.enable."""
active = true
data_type = "uint8"
valid_range = "[0, 10]"
units = "count"

[[saps]]
sap_key = "imu.faults.clear.minutes"
desc = """  Time to clear imu-service internal fault count.

            The time after an IMU failure occurs when the imu-service internal fault counter is cleared. If no failure
            has occurred in this time period, then the failure counter referenced by 'imu.faults.allowed.count' will be
            reset to zero.

            A value of zero will cause the fault count to not be cleared."""
active = true
data_type = "uint16"
units = "minutes"
valid_range = "[0, 1440]"

[[saps]]
sap_key = "imu.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           The imu uses only this window to ALARM when imu.devfault.alarm.error.rate is exceeded."""
active = true
data_type = "uint32"
valid_range = "[2000000, 120000000]"
units = "microsec"

[[saps]]
sap_key = "imu.devfault.alarm.error.rate"
desc = """  A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
            An error rate more than or equal to this value commands the service to fail over to the other IMU,
            and if enabled, to declare an alarm state."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "imu.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the imu.devfaul.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm. The device may continue to power cycle in this case."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "eps.pcu.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           For the eps service, there is only one layer, so this determines when the device needs to alarm."""
active = true
data_type = "uint32"
valid_range = "[2000000, 120000000]"
units = "microsec"

[[saps]]
sap_key = "eps.pcu.devfault.alarm.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to alarm."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "eps.pcu.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the eps.pcu.devfault.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           This determines when a device needs to be power cycled. This represents the size of the boxcar
           filter window for collecting samples from the device service. At the end of this window, an error
           rate will be calculated and checked against the rw.devfault.power.cycle.error.rate SAP."""
active = true
data_type = "uint32"
valid_range = "[2000000, 120000000]"
units = "microsec"

[[saps]]
sap_key = "rw.devfault.power.cycle.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to power cycle the device."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "rw.devfault.alarm.filter.window.multiplier"
desc = """ A multiplier for the filter.window.microsec SAP. Determines the size of the second layer filter window.
           The second layer determines when a device service should declare an Alarm. At the end of this window
           an error rate will be calculated and checked against the rw.devfault.alarm.error.rate SAP."""
active = true
data_type = "uint8"
valid_range = "[1, 20]"
units = "x multiplier"

[[saps]]
sap_key = "rw.devfault.alarm.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to declare an alarm state."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "rw.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the rw.devfault.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm. The device may continue to power cycle in this case."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "gps.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           This determines when a device needs to be power cycled. This represents the size of the boxcar
           filter window for collecting samples from the device service. At the end of this window, an error
           rate will be calculated and checked against the gps.devfault.power.cycle.error.rate SAP."""
active = true
data_type = "uint32"
valid_range = "[2000000, 120000000]"
units = "microsec"

[[saps]]
sap_key = "gps.devfault.power.cycle.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to power cycle the device."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"


[[saps]]
sap_key = "gps.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the gps.devfault.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm. The device may continue to power cycle in this case."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "fss.disable"
desc = """ When 1 (true), the fss-service will skip FSS on init, or power it off if already init'd.
           When 0 (false), the fss-service will init FSS device."""
active = false
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "fss.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           This determines when a device needs to be power cycled. This represents the size of the boxcar
           filter window for collecting samples from the device service. At the end of this window, an error
           rate will be calculated and checked against the fss.devfault.power.cycle.error.rate SAP."""
active = true
data_type = "uint32"
valid_range = "[2000000, 120000000]"
units = "microsec"

[[saps]]
sap_key = "fss.devfault.power.cycle.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to power cycle the device."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "fss.devfault.alarm.filter.window.multiplier"
desc = """ A multiplier for the filter.window.microsec SAP. Determines the size of the second layer filter window.
           The second layer determines when a device service should declare an Alarm. At the end of this window
           an error rate will be calculated and checked against the fss.devfault.alarm.error.rate SAP."""
active = true
data_type = "uint8"
valid_range = "[1, 20]"
units = "x multiplier"

[[saps]]
sap_key = "fss.devfault.alarm.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to declare an alarm state."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "fss.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the fss.devfault.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm. The device may continue to power cycle in this case."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "data.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           For the data service, there is only one layer. The data service monitors connections to each
           device service and ADCS, and keeps track of the number of times those services failed to
           report to data service according to the real-time requirements imposed on each service.
           This represents the size of the boxcar filter window for collecting samples in data service.
           At the end of this window, an error rate will be calculated for each service connected to
           data service and checked against the data.devfault.alarm.error.rate SAP."""
active = true
data_type = "uint32"
valid_range = "[10000000, 600000000]"
units = "microsec"

[[saps]]
sap_key = "data.devfault.alarm.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to declare an alarm state."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "data.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the data.devfault.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm. The device may continue to power cycle in this case."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "st1.disable"
desc = """ When 1 (true), the st-service will skip ST1 on init, if running it will be stopped and powered off.
           When 0 (false), the st-service will init ST1 device."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "st2.disable"
desc = """ When 1 (true), the st-service will skip ST2 on init, if running it will be stopped and powered off.
           When 0 (false), the st-service will init ST2 device."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "st.powerOnDelayUs"
desc = """  Delay before turning on power.

            Applies to normal power-on and FDIR power-cycle."""
active = true
data_type = "uint32"
valid_range = "[200000, 60000000]"
units = "microsec"

[[saps]]
sap_key = "st.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           This determines when a device needs to be power cycled. This represents the size of the boxcar
           filter window for collecting samples from the device service. At the end of this window, an error
           rate will be calculated and checked against the st.devfault.power.cycle.error.rate SAP."""
active = false
data_type = "uint32"
valid_range = "[2000000, 200000000]"
units = "microsec"

[[saps]]
sap_key = "st.devfault.power.cycle.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to power cycle the device."""
active = false
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "st.devfault.alarm.filter.window.multiplier"
desc = """ A multiplier for the filter.window.microsec SAP. Determines the size of the second layer filter window.
           The second layer determines when a device service should declare an Alarm. At the end of this window
           an error rate will be calculated and checked against the st.devfault.alarm.error.rate SAP."""
active = false
data_type = "uint8"
valid_range = "[1, 20]"
units = "x multiplier"

[[saps]]
sap_key = "st.devfault.alarm.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to declare an alarm state."""
active = false
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "st.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the st.devfault.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm. The device may continue to power cycle in this case."""
active = false
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "sband.disable"
desc = """ When 1 (true), the comms-service will skip SBand on init, or power it off if already init'd.
           When 0 (false), the comms-service will init SBand device."""
active = false
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "sband.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           This determines when a device needs to be power cycled. This represents the size of the boxcar
           filter window for collecting samples from the device service. At the end of this window, an error
           rate will be calculated and checked against the radio.devfault.power.cycle.error.rate SAP."""
active = true
data_type = "uint32"
valid_range = "[15000000, 120000000]"
units = "microsec"

[[saps]]
sap_key = "sband.devfault.power.cycle.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to power cycle the device."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "sband.devfault.alarm.filter.window.multiplier"
desc = """ A multiplier for the filter.window.microsec SAP. Determines the size of the second layer filter window.
           The second layer determines when a device service should declare an Alarm. At the end of this window
           an error rate will be calculated and checked against the radio.devfault.alarm.error.rate SAP."""
active = true
data_type = "uint8"
valid_range = "[1, 20]"
units = "x multiplier"

[[saps]]
sap_key = "sband.devfault.alarm.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to declare an alarm state."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "sband.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the radio.devfault.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm. The device may continue to power cycle in this case."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "uhf.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           This determines when a device needs to be power cycled. This represents the size of the boxcar
           filter window for collecting samples from the device service. At the end of this window, an error
           rate will be calculated and checked against the radio.devfault.power.cycle.error.rate SAP."""
active = true
data_type = "uint32"
valid_range = "[15000000, 120000000]"
units = "microsec"

[[saps]]
sap_key = "uhf.devfault.power.cycle.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to power cycle the device."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "uhf.devfault.alarm.filter.window.multiplier"
desc = """ A multiplier for the filter.window.microsec SAP. Determines the size of the second layer filter window.
           The second layer determines when a device service should declare an Alarm. At the end of this window
           an error rate will be calculated and checked against the radio.devfault.alarm.error.rate SAP."""
active = true
data_type = "uint8"
valid_range = "[1, 20]"
units = "x multiplier"

[[saps]]
sap_key = "uhf.devfault.alarm.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to declare an alarm state."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "uhf.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the radio.devfault.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm. The device may continue to power cycle in this case."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "uhf.channel.select"
desc =  """ The preset channel (A-Z) to select for the UHF radio."""
active = true
data_type = "string"
valid_range = "A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z"
units = ""

[[saps]]
sap_key = "pic.devfault.filter.window.microsec"
desc = """ Size of the first layer error rate filter window for the device.
           This determines when a device needs to be power cycled. This represents the size of the boxcar
           filter window for collecting samples from the device service. At the end of this window, an error
           rate will be calculated and checked against the pic.devfault.power.cycle.error.rate SAP."""
active = true
data_type = "uint32"
valid_range = "[2000000, 120000000]"
units = "microsec"

[[saps]]
sap_key = "pic.devfault.power.cycle.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to power cycle the device."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "pic.devfault.alarm.filter.window.multiplier"
desc = """ A multiplier for the filter.window.microsec SAP. Determines the size of the second layer filter window.
           The second layer determines when a device service should declare an Alarm. At the end of this window
           an error rate will be calculated and checked against the pic.devfault.alarm.error.rate SAP."""
active = true
data_type = "uint8"
valid_range = "[1, 20]"
units = "x multiplier"

[[saps]]
sap_key = "pic.devfault.alarm.error.rate"
desc = """ A threshold percentage (expressed as a float [0.0, 1.0]) representing the allowable error rate.
           An error rate more than or equal to this value commands the service to declare an alarm state."""
active = true
data_type = "float"
valid_range = "[0.0, 1.0]"
units = "percentage"

[[saps]]
sap_key = "pic.devfault.alarm.enable"
desc = """ When 1 (true), the service can declare an alarm upon exceeding the pic.devfault.alarm.error.rate SAP.
           When 0 (false), the fault will not alarm. The device may continue to power cycle in this case."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "pic.devfault.powerCycleEnable"
desc = """  Enable devfault powercyling in case of anomaly.

            When 1 (true), the service will trigger a power cycle upon exceeding the pic.devfault.power.error.rate SAP.
            When 0 (false), the service will just log the fault."""
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "pic.devfault.powerOffDelay"
desc = """  Delay before power cycling of the PIC. 

            In case of anomaly, devfault waits the specified amount of time before initiating the powercycle."""
active = true
data_type = "uint32"
valid_range = "[0, 60000000]"
units = "microsec"

# END DEV FAULT SAPS

[[saps]]
sap_key = "testdev.sap01"
desc = "This is Test and/or Development SAP #01"
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "testdev.sap02"
desc = "This is Test and/or Development SAP #02"
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "testdev.sap03"
desc = "This is Test and/or Development SAP #03"
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "testdev.sap04"
desc = "This is Test and/or Development SAP #04"
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "testdev.sap05"
desc = "This is Test and/or Development SAP #05"
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "testdev.sap06"
desc = "This is Test and/or Development SAP #06"
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "testdev.sap07"
desc = "This is Test and/or Development SAP #07"
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "testdev.sap08"
desc = "This is Test and/or Development SAP #08"
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "testdev.sap09"
desc = "This is Test and/or Development SAP #09"
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "testdev.sap10"
desc = "This is Test and/or Development SAP #10"
data_type = "string"
active = true
units = ""
valid_range = ""

[[saps]]
sap_key = "rw.fdir.powerCycle.interval"
desc =  "The minimum interval between two power-cycling of the same wheel for fault recovery"
active = true
data_type = "float"
valid_range = "[0.0, 3600.0]"
units = "seconds"

[[saps]]
sap_key = "rw.fdir.current.isNan.enable"
desc =  "Enables monitoring of reaction wheel input current (adcs.measHealth.rwCurrents) for NaN values (for rw.fdir.current.persist.short consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.current.isHigh.enable"
desc =  "Enables monitoring of reaction wheel input current (adcs.measHealth.rwCurrents) for high values (above rw.fdir.current.limit.high for rw.fdir.current.persist.short consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.current.isFlatline.enable"
desc =  "Enables monitoring of reaction wheel input current (adcs.measHealth.rwCurrents) for repeated values (for rw.fdir.current.persist.long consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.current.limit.high"
desc =  "The reaction wheel input current (adcs.measHealth.rwCurrents) absolute value upper threshold"
active = true
data_type = "float"
valid_range = "[0.0, 4.0]"
units = "Amps"

[[saps]]
sap_key = "rw.fdir.current.persist.short"
desc =  "The persistence of a condition before declaring a fault while monitoring the reaction wheel input current (adcs.measHealth.rwCurrents) for NaN or high values"
active = true
data_type = "uint32"
valid_range = ""
units = "number of samples"

[[saps]]
sap_key = "rw.fdir.current.persist.long"
desc =  "The persistence of a condition before declaring a fault while monitoring the reaction wheel input current (adcs.measHealth.rwCurrents) for flatlines"
active = true
data_type = "uint32"
valid_range = ""
units = "number of samples"

[[saps]]
sap_key = "rw.fdir.temp.motor.isNan.enable"
desc =  "Enables monitoring of reaction wheel motor temperature (adcs.measHealth.rwTemps) for NaN values (for rw.fdir.temp.persist consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.temp.mcu.isNan.enable"
desc =  "Enables monitoring of reaction wheel microcontroller (adcs.measHealth.rwMcuTemp) for NaN values (for rw.fdir.temp.persist consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.temp.drive.isNan.enable"
desc =  "Enables monitoring of reaction wheel motor drive transistor (adcs.measHealth.rwDriveTemp) for NaN values (for rw.fdir.temp.persist consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.temp.motor.isHigh.enable"
desc =  "Enables monitoring of reaction wheel motor temperature (adcs.measHealth.rwTemps) for high values (above rw.fdir.temp.motor.limit.high for rw.fdir.temp.persist consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.temp.mcu.isHigh.enable"
desc =  "Enables monitoring of reaction wheel microcontroller temperature (adcs.measHealth.rwMcuTemp) for high values (above rw.fdir.temp.mcu.limit.high for rw.fdir.temp.persist consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.temp.drive.isHigh.enable"
desc =  "Enables monitoring of reaction wheel motor drive transistor temperature (adcs.measHealth.rwDriveTemp) for high values (above rw.fdir.temp.drive.limit.high for rw.fdir.temp.persist consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.temp.motor.limit.high"
desc =  "The reaction wheel motor temperature (adcs.measHealth.rwTemps) upper threshold"
active = true
data_type = "float"
valid_range = "[0.0, 125.0]"
units = "degrees Celsius"

[[saps]]
sap_key = "rw.fdir.temp.mcu.limit.high"
desc =  "The reaction wheel microcontroller temperature (adcs.measHealth.rwMcuTemp) upper threshold"
active = true
data_type = "float"
valid_range = "[0.0, 125.0]"
units = "degrees Celsius"

[[saps]]
sap_key = "rw.fdir.temp.drive.limit.high"
desc =  "The reaction wheel drive transistor temperature (adcs.measHealth.rwDriveTemp) upper threshold"
active = true
data_type = "float"
valid_range = "[0.0, 125.0]"
units = "degrees Celsius"

[[saps]]
sap_key = "rw.fdir.temp.persist"
desc =  "The persistence of a condition before declaring a fault while monitoring the reaction wheel temperatures (adcs.measHealth.rwTemps, adcs.measHealth.rwMcuTemp, and adcs.measHealth.rwDriveTemp)"
active = true
data_type = "uint32"
valid_range = ""
units = "number of samples"

[[saps]]
sap_key = "rw.fdir.temp.cooldown"
desc =  "The hold-off period, after responding to violation of a temperature condition, before monitoring for high values again, effectively allowing cool-down"
active = true
data_type = "float"
valid_range = "[0.0, 3600.0]"
units = "seconds"

[[saps]]
sap_key = "rw.fdir.speed.isNan.enable"
desc =  "Enables monitoring of reaction wheel speed (adcs.meas.rwXSpeed) for NaN values (for rw.fdir.speed.persist.short consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.speed.isUnresponsive.enable"
desc =  "Enables monitoring of reaction wheel speed (adcs.meas.rwXSpeed) for responsiveness (for rw.fdir.speed.persist.long consecutive cycles)"
active = true
data_type = "boolean"
valid_range = ""
units = ""

[[saps]]
sap_key = "rw.fdir.speed.persist.short"
desc =  "The persistence of a condition before declaring a fault while monitoring the reaction wheel speed (adcs.meas.rwXSpeed, adcs.measHealth.rwTargetSpeed) for NaN values"
active = true
data_type = "uint32"
valid_range = ""
units = "number of samples"

[[saps]]
sap_key = "rw.fdir.speed.persist.long"
desc =  "The persistence of a condition before declaring a fault while monitoring the reaction wheel speed (adcs.meas.rwXSpeed) for unresponsiveness"
active = true
data_type = "uint32"
valid_range = ""
units = "number of samples"

[[saps]]
sap_key = "rw.powerOnDelay1"
desc = """ PowerOn Delay used when PowerOn Count is < 2.
           * Applies to service start and FDIR power-cycle.
"""
active = true
data_type = "uint32"
valid_range = "[1, 60]"
units = "seconds"

[[saps]]
sap_key = "rw.powerOnDelay2"
desc = """ PowerOn Delay used when PowerOn Count is > 1.
           * Applies only to FDIR power-cycle.
"""
active = true
data_type = "uint32"
valid_range = "[10, 3600]"
units = "seconds"

[[saps]]
sap_key = "rw.powerOnDelay3"
desc = """ SpinDown PowerOn Delay for < 3 RW's operating.
           * If < 3 RW's are enabled then PowerOff the remaining RW's
             for this long so they may drop to a lower speed.
           * Used for ADCS Trod Only Mode.
           * A value of 0 disables.
"""
active = true
data_type = "uint32"
valid_range = "[0, 3600]"
units = "seconds"

[[saps]]
sap_key = "rw.powerOnMaxCnt"
desc = """ Maximum Per/RW PowerOn Count before Self-Disable and Alarm.
           * A value of 0 disables.
"""
active = true
data_type = "uint32"
valid_range = "[0, 20]"

[[saps]]
sap_key = "rw.powerOnCntClear"
desc = """ Time before clearing Per/RW PowerOn Count after running without error.
"""
active = true
data_type = "uint32"
valid_range = "[10, 3600]"

[[saps]]
sap_key = "AnomalyContextMessages"
desc =  "The number of messages to capture prior to an alarm/panic/commanded FCPU reboot when generating an anomaly report"
active = true
data_type = "uint32"
valid_range = ""
units = "number of messages"

[[saps]]
sap_key = "RebootContextMessages"
desc =  "The number of messages to capture prior to an unexpected FCPU shutdown when generating an anomaly report"
active = true
data_type = "uint32"
valid_range = ""
units = "number of messages"

[[saps]]
sap_key = "RebootContextMinutes"
desc =  "The duration to search for an anomaly prior to an unexpected FCPU shutdown when generating an anomaly report. If set to 0, search until the beginning of the corresponding boot."
active = true
data_type = "float"
valid_range = "[0.0, 10080.0]"
units = "minutes"
